	.TITLE SUBSNR-SONAR SCREEN FOR SUBS
	.SBTTL *************************
	.SBTTL *
	.SBTTL *PROGRAMMER: JOHN RAY
	.SBTTL *
	.SBTTL *CHECKER*
	.SBTTL *
	.SBTTL *************************
;
;DATE INITIATED: 6/1/78
;PROJECT CHARGE #: 5J121
;DISK #: 5 PURPLE
;HARDWARE REQUIREMENTS:
;
;
;
;
;MEMORY REQUIREMENTS:
;
;
;
;
;INTERRUPT REQUIREMENTS:
;
;
;
;
;ASSEMBY COMMAND STRING:
;
;
;
;
;LINK COMMAND STRING:
;
;
;
;
;PROGRAM DESCRIPTION:
; THIS PROGRAM HANDLING THE "SONAR"
; EFFECT ON SUBS.
;
;
	.ASECT
	.RADIX 16
;
;
	.SBTTL EXTERNAL REFERENCES
;
	.GLOBL VBLANK,FRAME,CRSRN,QUAD,BLPNTR,BLPCNT,BLPNUM
	.GLOBL TEMP1,TEMP2,SONAR,HPOS,VPOS,SNRON,SNROFF,SNRCNTR
	.GLOBL OPTSW4,GSTAT,CNTDWN
;
;
;
;
	.SBTTL EQUATES
;
;
SCNLOC  =0B00			;STARTING ADDRESS OF SONAR SCREEN
	.=2800
;
;
	.SBTTL MAIN LOOP
;
; DESCRIPTION:
;	A) ODD FRAME-CALCULATE AND OUTPUT
;	   ONLY THE BLIP
;	B) EVEN FRAME-OUTPUT THE SONAR SCREEN
;	   WITH THE CURSOR. THE CURSOR MOVES
;	   EVERY NTH FRAME. THERE ARE 15
;	   CURSOR ROTATIONS PER QUADRANT
;
;
SONAR:  JSR BLNKSCRN			;PUT OUT BLANK SONAR SCREEN
	LDA Z,FRAME
	ROR
	BCC SCREEN			;EVEN FRAME-OUTPUT SCREEN
	JMP BLIP			;ODD FRAME-OUTPUT BLIP
	.REPT 0
ON THE EVEN FRAME, THE SONAR SCREEN
AND THE CURSOR ARE OUTPUTED. THE
BLANK SCREEN IS FIRST PUT UP, THEN THE
QUADRAND WHERE THE CURSOR CURRENTLY
RESIDES IT RE-WRITTEN. THE CURSOR
MOVES 15 TIMES IN EACH EQUADRANT.
THE NUMBERING SYSTEM IS SUCH THAT
ONLY A TABLE OF STAMP VALUES FOR
QUADRANT 0 IS STORED. VALUES FOR
OTHER QUADRANTS ARE OBTAINED BY
ADDING 25(HEX) FOR EACH SUCCEEDING
QUADRANT TO THE TABLE FOR QUADRANT 0
(CRSRPIC).
	
THE LSB OF THE ADDRESS TO STORE
THE DATA IS ALSO CONTAINED IN A 
TABLE (CRSRA).
	.ENDR
SCREEN:
	LDA I,3E			;PUT ISLANDS ON SONAR
	STA A,SCNLOC+20+1
	STA A,SCNLOC+20+1D
	LDA I,3F
	STA A,SCNLOC+40+2
	STA A,SCNLOC+40+1E
	LDX Z,CRSRN			;UPDATE CURSOR
	INX
	STX Z,CRSRN			;AFTER 15 CURSORS, UPDATE
	CPX I,0F			;TO NEW QUADRANT
	BNE CONT
	LDX I,00
	STX Z,CRSRN			;RESET CURSOR TO 00
	INC Z,QUAD
	LDA Z,QUAD
	CMP I,04			;ONLY 4 QUADRANTS
	BNE CONT
	LDA I,00			;RESET QUAD TO 00
	STA Z,QUAD
CONT:	JSR OUTPUT
	RTS
	.SBTTL SONAR SCREEN OUTPUT
;DESCRIPTION:
;	THIS SUBROUTINES TAKES THE CURSOR
;	NUMBER (CRSRN) AND OUTPUTS THE
;	APPROPRIATE STAMPS TO THE CORRECT
;	QUADRANT (QUAD)
;
;
;REGISTERS:
;
;	ACC,X,Y
;
;
;STACK USE:
;
;	NONE
;
;
;BASE PAGE USED:
;
;	TEMP1,TEMP2,QUAD,CRSRN
;
;
OUTPUT:	LDA I,00			;COUNTER FOR THE FOUR STAMPS
	STA Z,TEMP2			;IN THE QUADRANT THAT NEED
					;TO BE CHANGED
NEXT:	LDY Z,QUAD			;Y=QUADRANT NUMBER
	TYA				;FIND THE ADDRESS WHERE
	ASL				;THIS CURSOR STAMP WILL BE STORED
	ASL				;[4*QUAD+TEMP3+CRSRADR]
	CLC
	ADC Z,TEMP2
	TAX
	LDA AX,CRSRADR
	STA Z,TEMP1			;PUT THE ADDRESS IN TEMP1
	LDA I,0B			;AND TEMP2
	STA Z,TEMP1+1
	LDA Z,CRSRN			;FIND THE DATA WHICH
	ASL				;DETERMINES THE STAMP
	ASL				;[CRSN*4+TEMP3+CRSRPIC]
	ADC Z,TEMP2			;+QUAD*25
	TAX
	LDA AX,CRSRPIC
	CMP I,00			;00 IS BLANK, NO ROTATIONS
	BEQ 20$				;FOR DIFFERENT QUADS
30$:	DEY
	BMI 20$
	CLC
	ADC I,25
	BCC 30$				;BRA
20$:	LDY I,00
	STA NY,TEMP1			;ACC TO 1ST SCREEN
	LDY I,28.
	STA NY,TEMP1			;ACC TO 2ND SCREEN
	INC Z,TEMP2			;REPEAT FOR NEXT CELL
	LDA Z,TEMP2
	CMP I,04
	BNE NEXT
	RTS				;DONE AFTER 4 CELLS
	.PAGE
	.SBTTL BLANK SONAR SCREEN
;DESCRIPTION:
;
;	THIS SUBROUTINE PUTS UP A BLANK
;	SONAR SCREEN FOR BOTH MONITORS
;
;REGISTERS:
;
;	ACC AND X USED
;
;STACK USE:
;
;	4 LOCATIONS
;
;BASE PAGE USE:
;
;	QUAD,CRSRN
;
;SUBROUTINES CALLED:
;
;	OUTPUT
;
;
BLNKSCRN:LDA Z,QUAD			;STORE CURRENT CURSOR POSITION
	PHA	
	LDA Z,CRSRN
	PHA
	LDA I,0F			;CURSOR=15 (BLANK)
	STA Z,CRSRN
	LDX I,03
	STX Z,QUAD
10$:	JSR OUTPUT			;PUT UP THIS QUAD
	DEC Z,QUAD
	BPL 10$				;MUST WRITE OUT ALL 4 QUADS
	PLA				;RETRIEVE CURRENT CURSOR POSITION
	STA Z,CRSRN
	PLA
	STA Z,QUAD
	RTS
	.PAGE
	.SBTTL SONAR BLIP
;
;DESCRIPTION:
;	THIS ROUTINE PUTS A BLIP ON
;	PLAYER A SONAR SCREEN BASED
;	ON THE POSITION OF PLAYER B SUB.
;
;
BLIP:	LDY I,28.		;SCREENS ARE 28. APART
10$:	TYA
	LSR			;GET SUB #
	AND I,2
	TAX
	LDA Z,GSTAT		;GIVE RAPID "PINGS" IN FREEZE
	BPL 12$
	LDA Z,CNTDWN
	BEQ 12$
	LDA A,SNRCNTR
	SEC
	SBC I,4
	BPL 60$
	LDA I,3F		;VISIBLE IF OVER 3F
60$:	STA A,SNRCNTR
	AND I,30
	BEQ 50$
	STA Z,SNRON		;ON NOW
	STA Z,SNRON+2
	BNE 16$			;BRA
50$:	STA Z,SNROFF		;OFF NOW
	STA Z,SNROFF+2
	BEQ 16$			;BRA
12$:	LDA AX,SNRCNTR		;TIME TO SHUT OFF SONAR SOUND?
	BNE 15$
	STA ZX,SNROFF		;YES
	BEQ 16$			;BRA
15$:	DEC AX,SNRCNTR		;NO-UPDATE COUNTER
	LDA Z,OPTSW4
	ROR
	BCC 17$
	LDA Z,GSTAT
	BPL 16$
17$:	STA ZX,SNRON
16$:	LDA ZX,VPOS		;BIT 3-5 =VPOS
	LSR
	LSR
	AND I,38
	STA Z,TEMP1
	LDA ZX,HPOS		;BIT 0-2 =HPOS
	ROL
	ROL
	ROL
	ROL
	AND I,07
	ORA Z,TEMP1
	TAX			;X=INDEX TO TABLES
	STX	Z,TEMP2		;SAVE X
	LDA	Z,QUAD		;GET QUAD + CURSRN
	ASL			;IN ONE BYTE
	ASL
	ASL
	ASL
	ORA	Z,CRSRN
	CMP	AX,BLPSTRT	;SEE IF TIME TO OUTPUT BLIP
	BEQ	20$		;YES
	TYA
	LSR
	AND	I,2
	TAX
	DEC	ZX,BLPCNT	;NO-REFRESH?
	BPL	30$		;NO
	INC	ZX,BLPNTR	;YES-GET NEXT INCREMEMT
	STY	Z,TEMP1		;SAVE Y
	LDY	ZX,BLPNTR
	LDA	AY,BLPINC
	STA	ZX,BLPCNT	;PUT INCREMENT IN COUNTER
	LDY	Z,TEMP1		;GET Y
	JMP	25$
20$:	TYA			;START BLIP
	LSR
	AND	I,2
	TAX
	BIT	Z,GSTAT		;DON'T START
	BPL	21$		;PING DURING FREEZE
	LDA	Z,CNTDWN
	BNE	22$
21$:	LDA	I,30		;START PING
	STA	AX,SNRCNTR
22$:	LDA	I,0		;RESET COUNTERS
	STA	ZX,BLPCNT
	STA	ZX,BLPNTR
	LDA	Z,TEMP2
	STA	ZX,BLPNUM
25$:	LDA	ZX,BLPNUM
	TAX
	LDA AX,BLPADR
	STA Z,TEMP1		;PUT BLIP ADDRESS
	LDA I,0B		;IN TEMP1
	STA Z,TEMP1+1
	LDA AX,BLPDATA
	STA NY,TEMP1		;Y=0 OR 28. FOR DIFFERENT SCREENS
30$:	CPY	I,0		;DONE BOTH SCREENS?
	BEQ	40$		;YES
	LDY	I,0		;NO- DO OTHER ONE
	JMP	10$
40$:	RTS
	.PAGE
	.SBTTL CURSOR ADDRESS TABLE
;
;THIS TABLE GIVE THE LSB OF THE 4 ADDRESS
;USED TO CHANGE THE 4 STAMPS IN
;EACH OF 4 QUADRANTS
;
CRSRADR:.BYTE 02,03,22,23		;QUAD 0
	.BYTE 43,63,42,62		;QUAD 1
	.BYTE 61,60,41,40		;QUAD 2
	.BYTE 20,00,21,01		;QUAD 3
	.SBTTL CURSOR PICTURE TABLE
;
;THIS TABLE GIVES THE 4 CURSOR PICTURES
;FOR FOR EACH OF 15 ROTATIONS OF
;THE CURSOR FOR QUAD 0. THE OTHER 45
;ROTATIONS CAN BE OBTAINED BY ADDING
;(QUAD*25) TO THE NUMBER IN THE
;TABLE BELOW.
;
CRSRPIC:.BYTE 44,41,43,42		;CURSOR 0
	.BYTE 46,41,45,42
	.BYTE 48,41,47,42
	.BYTE 4A,41,49,42
	.BYTE 4C,41,4B,42
	.BYTE 4E,41,4D,42		;CURSOR 5
	.BYTE 50,51,4F,42
	.BYTE 53,54,52,42
	.BYTE 40,57,55,56
	.BYTE 40,5A,58,59
	.BYTE 40,41,5B,5C		;CURSOR A
	.BYTE 40,41,5D,5E
	.BYTE 40,41,5F,60
	.BYTE 40,41,61,62
	.BYTE 40,41,63,64
					;CURSOR E
	.BYTE 40,41,00,42		;BLANK SCREEN
	.PAGE
	.SBTTL BLIP TABLES
;
;	THERE TABLES GIVE THE LOWER ADDRESS
;	BYTE AND STAMP NUMBER FOR A BLIP
;	BASED ON THE POSITION OF A SUB.
;
BLPADR:	.BYTE	0,0,1,1,2,2,3,3
	.BYTE	0,0,1,1,2,2,3,3
	.BYTE	20,20,20,21,22,22,23,23
	.BYTE	20,20,21,21,22,22,23,23
	.BYTE	40,40,41,41,42,42,43,43
	.BYTE	40,40,41,41,42,42,43,43
	.BYTE	60,60,61,61,62,62,63,63
BLPDATA:
	.BYTE	0EC,0EC,0ED,0EF,0D4,0D6,0D7,0D7
	.BYTE	0EC,0EC,0ED,0EE,0D5,0D6,0D7,0D7
	.BYTE	0EB,0EB,0EB,0F8,0F0,0F8,0D8,0D8
	.BYTE	0EA,0EA,0F2,0FA,0F2,0FA,0D9,0DA
	.BYTE	0E8,0E8,0F1,0F9,0F1,0F9,0DB,0DC
	.BYTE	0E6,0E6,0F3,0FB,0F3,0FB,0DD,0DD
	.BYTE	0E5,0E5,0E4,0E3,0E1,0DF,0DE,0DE
	.PAGE
	.SBTTL START BLIP TABLE
;
;THIS TABLE GIVES THE QUADRANT AND CURSOR NUMBER
;WHERE EACH BLIP SHOULD BE STARTED
;THE QUADRANT IS IN THE HIGH NIBBLE, CURSOR IN THE
;LOW NYBBLE
;
BLPSTRT:
	.BYTE 38,38,3A,3D,01,05,08,08
	.BYTE 38,38,3A,3D,02,05,08,08
	.BYTE 36,36,36,3A,01,06,0A,0A
	.BYTE 31,31,33,37,01,0B,0D,0E
	.BYTE 2E,2E,2A,24,1C,15,12,11
	.BYTE 2A,2A,27,22,1E,19,15,15
	.BYTE 28,28,26,21,1E,1A,18,18
	.SBTTL BLIP INCREMENT TABLE
;
;THIS TABLE GIVES THE NUMBER OF
;BLANK FRAMES BETWEEN EACH BLIP OUTPUT
;
BLPINC:
	.BYTE 0,0,0,0
	.BYTE 0,0,1,0
	.BYTE 0,1,0,1
	.BYTE 0,1,1,1
	.BYTE 1,40
	.END
                                                                                                                                            