	.TITLE	SUBGAM - SUBS GAME PROGRAM
	.SBTTL	**************************
	.SBTTL	*
	.SBTTL	*PROGRAMMER:  JOHN RAY
	.SBTTL	*
	.SBTTL	*CHECKER:
	.SBTTL	*
	.SBTTL	**************************
;
;DATE INITIATED:	6/29/78
;PROJECT CHARGE #:	5J121
;DISK #: 6
;HARDWARE REQUIREMENTS:
;			MOTION - 4 OBJECTS
;			PLAYFIELD - 32X28 - BIT7 = SCREEN 2, BIT6 = SCREEN 0
;
;MEMORY REQUIREMENTS:
;			PROGRAM - 6KX8
;
;INTERRUPT REQUIREMENTS:
;
;	NMI=32V
;
;LINK COMMAND STRING:
;			PP:/L=SUBGAM,SUBSNR,SUBCN2
;
;PROGRAM DESCRIPTION:
;
;	TWO PLAYER COMPETITIVE GAME.  EACH PLAYER HAS HIS OWN MONITOR
;	TO SEARCH AND DESTROY HIS COMPETITOR'S SUB.  EACH PLAYER HAS
;	A SONAR SCREEN TO AID HIM IN FINDING HIS COMPETITOR.
;
	.ASECT
	.RADIX	16
;
;
	.SBTTL	CHECKSUM EQUATES
;
;
CKSM1	=6F		;2000-23FF	;ACTUALLY 2000-20FF
CKSM2	=0		;2400-27FF	;NOT USED
CKSM3	=0A4		;2800-2BFF
CKSM4	=0B4		;2C00-2FFF
CKSM5	=0BD		;3000-33FF
CKSM6	=1B		;3400-37FF
CKSM7	=0D		;3800-3BFF
CKSM8	=0AA		;3C00-3FFF
	.PAGE
	.SBTTL	PROGRAM MEMORY ALLOCATION
	.REPT	0

THE PROGRAM ITSELF RESIDES IN 6K BYTES.  THE FRENCH AND SPANISH MESSAGES DID NOT
FIT IN THE 6K, SO THEY ARE IN A SEPARATE 256 BYTE PROM.  THE GAME WILL WORK JUST
FINE WITHOUT THE FRENCH/SPANISH PROM, BUT ENGLISH LANGUAGE MESSAGES WILL APPEAR
IF THE OPTION SWITCHES ARE SET FOR FRENCH OR SPANISH.  (THERE WILL BE A CHECKSUM
ERROR IN SELF-TEST FOR THE MISSING PROM, THOUGH.)

	2000-20FF	FRENCH, SPANISH MESSAGES (SUBGAM)
	2800-2A4F	SONAR ROUTINE (SUBSNR)
	2A50-2ACF	"STANDARD" COIN ROUTINE (SUBCN2)
	2AD0-3FFF	MAIN PROGRAM (SUBGAM)

THE SELF-TEST AND DIAGNOSTIC ROUTINES ARE CONTAINED IN THE LAST 1K, SO ONLY ONE
ROM OR ONE PAIR OF PROMS ARE NEEDED TO DEBUG THE BOARD.
	.ENDR


	.SBTTL	STATUS BYTE DESCRIPTION
	.REPT	0

GSTAT -- GAME STATUS BYTE

	D7=0	ATTRACT MODE
	D7=1	GAME MODE
	D6=1	FLAG TO START THE GAME
	D0=1	A CRASH IS IN PROGRESS

EXPLANATION:

D7 AND D6 ARE BOTH 0 IN THE ATTRACT MODE.  WHEN A PLAYER HITS HIS "START" BUTTON,
D7 AND D6 ARE SET TO 1.  D7 SAYS GAME MODE, D6 SAYS TO START THE GAME.  D6 IS RESET
TO 0 AFTER EVERYTHING HAS BEEN INITIALIZED, INCLUDING THE COUNTDOWN TIMER.  D7
STAYS HIGH UNTIL THE GAME IS OVER.

D0 IS LOOKED AT BY THE AUDIO ROUTINE TO OUTPUT THE "CRASH" SOUND.  IT IS SET BY ANY
ROUTINE THAT SENSES A CRASH.


STAT -- STATUS WORD FOR EACH MOTION OBJECT (INCLUDING POSSIBLE INVISIBLE TORPEDOES.
	THE TORPEDOES ARE MULTIPLEXED TWO TO A MOTION OBJECT)

	SUB -- IF STAT IS FOR A SUBMARINE

	D7=0	DRONE
	D7=1	PLAYER
	D6=1	IF STEERING WAS SENSED
	D5=1	IF STEERING WAS CW, ELSE CCW
	D4	"FIRE" DEBOUNCE BIT
	D3=1	IF PLAYFIELD COLLISION IN PRORESS
	D2=1	IF TORP COLLISION IN PROGRESS
	D1=1	IF SUB COLLISION IN PROGRESS

	TORP -- IF STAT IS FOR A TORPEDO

	D7=0	TORPEDO HAS NOT BEEN FIRED (INVISIBLE)
	D7=1	TORPEDO HAS BEEN FIRED (VISIBLE)
	D6	"FIRE" DEBOUNCE BIT
	D3=1	IF PLAYFIELD COLLISION IS IN PROGRESS
	D2=1	IF TORPEDO COLLISION IS IN PROGRESS
	D1=1	IF SUB COLLISION IS IN PROGRESS
	.ENDR
	.PAGE
;
;
	.SBTTL	BASE PAGE ALLOCATION - RAM
;
;
	.=80
FRAME: .BLKB 1			;FRAME COUNTER
GTIME:	.BLKB 3			;GAME TIMER
BLPNTR:	.BLKB 4			;BLIP POINTER
BLPCNT	=BLPNTR+1		;BLIP COUNTER
QUAD:	.BLKB 1			;SONAR SCREEN QUADRANT NUMBER
CRSRN:	.BLKB 1			;SONAR SCREEN CURSOR NUMBER
TEST1:	.BLKB 1			;TWO BYTES TO VERIFY THAT
TEST2:	.BLKB 1			;GAME HAS BEEN INITIALIZED
TEMP1:	.BLKB 2			;TEMPORARY STORAGE LOCATIONS
TEMP2:	.BLKB 2
	.=90
HPOS:	.BLKB 8			;DMA-HIGH HPOS BYTE
SBENABL	=HPOS+1			;DMA-D7=VISIBILTY
SOUNDS	=SBENABL+4		;D7-D4=EXPLOSION, D3-D0=LAUNCH VOLUME
$CNCT	=SOUNDS+2		;COIN COUNT
VPOS:	.BLKB 8			;DMA-HIGH VPOS BYTE
ROTATE	=VPOS+1			;DAM-PICTURE ROTATION
STAT:	.BLKB 12.		;STATUS BYTE FOR EACH MOTION OBJECT
TIM	=STAT+1			;TIMER FOR EACH MOTION OBJECT
HPOSL:	.BLKB 12.		;LOW ORDER HPOS BYTE
VPOSL	=HPOSL+1		;LOW ORDER VPOS BYTE
HPOST:	.BLKB 12.		;TEMP LOCATIONS FOR
VPOST	=HPOST+1		;V & H POSITIONS
ROTEMP:	.BLKB 12.		;ROTATE TIME BYTE
SCORED	=ROTEMP+1		;FOR EACH PLAYER'S SCORE
BLPNUM	=SCORED+4		;BLIP NUMBER
$INTCT	=BLPNUM+4		;INTERRUPT COUNTER
GSTAT	=$INTCT+2		;GAME STATUS
TEMP3:	.BLKB 2			;TEMPORARY STORAGE
TEMP4:	.BLKB 3	
HPOSLST:	.BLKB 4
VPOSLST	=HPOSLST+1
NTEMP1:	.BLKB 1			;NMI TEMP LOCATIONS
NTEMP2:	.BLKB 1
NTEMP3:	.BLKB 2
NTEMP4:	.BLKB 1
$PSTSL:	.BLKB 4			;POST SLAM (2 BYTES)
$CNSTT	=$PSTSL+1		;COIN DETECTION (2 BYTES)
$LMTIM:	.BLKB 1			;PRE-SLAM TIMER (1 BYTE)
$CCTIM:	.BLKB 1			;COIN COUNTER TIMER (1 BYTE)
CNTDWN:	.BLKB 1			;GAME COUNTDOWN
	.PAGE
	.SBTTL	BASE PAGE ALLOCATION - INPUTS
;
;
DIAGSTP	=00			;DIAGNOSTIC STEP SWITCH (LOW)
DIAGHLD	=01			;DIAGNOSTIC HOLD SWITCH (LOW)
SLAM	=02			;SLAM SWITCH (LOW)
SPARIN	=03			;SPARE INPUT
STRDIR	=04			;STEERING DIRECTION
STRFLG	=05			;STEERING FLAG
COIN	=20			;COIN SWITCH (HIGH)
STRTSW	=21			;START SWITCH (LOW)
FIRE	=25			;FIRE BUTTON (LOW)
VBLANK	=24			;VBLANK (LOW)
SLFTST	=26			;SELF TEST SWITCH (LOW)
;
;
	.SBTTL	OPTION SWITCHES
;
;0=SWITCH ON, 1=SWITCH OFF
;
OPTSW1	=60			;8,7 - COIN MODE
OPTSW2	=61			;6,5 - 61 BIT 0=1=FREE PLAY
				;61 BIT 0=0=NO FREE PLAY
				;60 BIT 1 = MSB OF COIN MODE
				;60 BIT 0 = MIDDLE BIT OF COIN MODE
				;61 BIT 1 = LSB OF COIN MODE
OPTSW3	=62			;LANGUAGE - 4,3
				;00=ENGLISH
				;01=FRENCH
				;10=SPANISH
				;11=GERMAN
OPTSW4	=63			;D0=1=NO PING IN ATTRACT
				;D0=0=PING IN ATTRACT
				;D1=0=TIME MODE
				;D1=1=CREDIT MODE
;
;
	.SBTTL	BASE PAGE ALLOCATION - OUTPUTS
;
;
NOIZRST	=00			;RANDOM NOISE RESET
LMPON	=60
LMPOFF	=61
SNROFF	=64			;SONAR PING SOUND
SNRON	=65
CRSHOFF	=68			;CRASH SOUND
CRSHON	=69
XPLDOFF	=6A			;EXPLOSION SOUND
XPLDON	=6B
INVTON	=6C			;INVERT VIDEO
INVTOFF	=6D
STRRST	=20
WDOG	=40
	.PAGE
	.SBTTL	EQUATES
;
;
PF	=0800			;START OF PLAYFIELD RAM
SCRAD1  =PF+35.			;SCORE ADDRESS 1
SCRAD2	=SCRAD1+22.		;SCORE ADDRESS 2
TIMADR  =PF+<27.*32.>+4		;TIME ADDRESS
BLANK	=0F9			;BLANK MOTION PICTURE
SBXPL1	=0C0			;SUB EPLOSION PICTURE 1
SBXPL2	=SBXPL1+8
TPXPL1	=SBXPL1+1		;TORP EXPOSION PICTURE 1
TPXPL2	=TPXPL1+8
; THESE COUNTERS MUST BE LESS THEN
; OR EQUAL TO 3F SO THEY DON'T
; BECOME VISIBLE.
FIRETIM	=0840			;DRONE MAX. FIRE DELAY
SHOTTIM	=0841			;DRONE MIN. FIRE DELAY
				;2 BYTE INTERSPERSED PRAM
SNRCNTR	=0860			;PFLD RAM USED AS SONAR PING COUNTERS
POSTIM	=0861			;VALID POSITION TIMERS
XPLCNTR	=0880			;XPLOSION COUNTER
MISSCNTR=0881			;MISS COUNTER
RSTCNTR	=0882			;GAME RESET COUNTER
LNGINDX	=0883			;LANGUAGE INDEX FOR MESSAGES
MISSMAX	=3F			;VALUE TO START THE MISS COUNTER AT
	.PAGE
	.SBTTL	ENTRY POINTS
;
	.GLOBL	SONAR,MOOLAH
;
	.SBTTL	EXTERNAL REFERENCES
;
	.GLOBL	VBLANK,FRAME,CRSRN,QUAD,BLPNTR,BLPCNT,BLPNUM
	.GLOBL	TEMP1,TEMP2,HPOS,VPOS,SNRON,SNROFF,SNRCNTR,CNTDWN
	.GLOBL	OPTSW4,GSTAT,$CNSTT,$PSTSL,$INTCT,$LMTIM,$CNCT,$CCTIM
;
;
	.SBTTL	PROGRAM ASSEMBLY OPTIONS
;
;
;DESCRIPTION:
;
;	THE PROGRAM WILL BE ASSEMBLED DIFFERENT WAYS DEPENDING ON THE
;	OPTION EQUATE BELOW.
;
;	OPTION 0 - DEVELOPMENT SYSTEM
;
;	OPTION 1 - PROM
;
OPTION	=1
	.PAGE
	.SBTTL	MAIN PROGRAM LOOP
;
	.=2000
	JMP	PWRON		;IN DEV. SYS.
	.SBTTL	CKECKSUM 1
	.BYTE CKSM1
.TEMP1	=.
	.=2AD0
	.SBTTL	CHECKSUM 3
	.BYTE	CKSM3
	.BYTE	0,0,0,0,0	;SPARE
;
;
	.SBTTL	START PLAY SUBROUTINE
;
;REGISTERS:
;
;USED:		A,X,Y	RESTORED:
;
;STACK USE:
;
;3 LEVEL SUBROUTINES
;
;BASE PAGE USE:
;USED:
;ALTERED:	SOUND,FRAME,VEL,STAT,TIM
;
;SUBROUTINES CALLED:
;INITIL,TRANS,UPDATE,SONAR,SUBCOL,PFOUT,SCROUT
;
START:	BIT	Z,GSTAT		;GSTAT BIT 6=1=INITIALIZE
	BVC	PLAY
	LDA	Z,GSTAT
	AND	I,0BF
	STA	Z,GSTAT
	LDA	I,0FF
	STA	Z,CNTDWN
	LDA	Z,OPTSW4	;CREDIT MODE?
	AND	I,2
	BEQ	START2		;NO
	LDA	Z,OPTSW2	;FREE PLAY?
	ROR
	BCS	START2		;YES
	JSR	A,ADDTIME	;GIVE TIME
START2:	JSR	A,INITIL	;SET UP MOTION OBJECTS
	LDA	I,0		;ZERO SCORES
	STA	Z,SCORED
	STA	Z,SCORED+2
	STA	Z,NOIZRST	;START RANDOM NOISE GENERATOR
	JSR	A,PFOUT		;OUTPUT PLAYFIELD
PLAY:	JSR	A,TRANS		;XFER TEMP TO SCREEN
	INC	Z,FRAME
	JSR	A,SCROUT	;OUTPUT SCORE
	LDA	Z,CNTDWN
	BEQ	SBLP
	DEC	Z,CNTDWN
	.PAGE
	.SBTTL	SUB LOOP
;
;HANDLE THE SUBS NOW
;
SBLP:	LDX	I,2
SUBLP:	ROL	ZX,SBENABL	;DISABLE SUB ON OTHER SCREEN
	CLC
	ROR	ZX,SBENABL
	STA	ZX,INVTOFF
	LDA	ZX,TIM		;COLLISION TIMER=0?
	BNE	10$		;NO-BLOWING UP
	JMP	A,SL1		;YES - NOT BLOWING UP
10$:	DEC	ZX,TIM		;NO-DECREMENT IT
	BEQ	20$		;NOW IT IS!
	ROL	ZX,SBENABL	;NOT 0 YET
	SEC			;STILL BLOWING UP
	ROR	ZX,SBENABL	;ENABLE ON OTHER SCREEN
	LDY	I,SBXPL1	;ALTERNATE EXPLOSION PICTURES
	LDA	Z,FRAME
	AND	I,2
	BEQ	30$
	LDY	ZX,ROTEMP
	STA	ZX,INVTON
30$:	STY	ZX,ROTATE
	JMP	A,SLNEXT
;DONE EXPLODING -- RESET INTO RANDOM POSITION
20$:	JSR	A,RANDOM
	JMP	A,SLNEXT
;COME HERE IF NOT BLOWING UP
SL1:
	LDA	ZX,STAT		;SUB-SUB OR SUB-PFLD COLLISION?
	AND	I,0A
	BEQ	10$		;NO
	LDA	Z,FRAME		;YES--BLINK ON AND OFF
	AND	I,4
	BEQ	10$		;OFF THIS FRAME
	LDA	Z,GSTAT		;DON'T BLINK IN ATTRACT
	BEQ	10$
	ROL	ZX,SBENABL	;ON THIS FRAME
	SEC
	ROR	ZX,SBENABL
10$:	LDA	ZX,ROTEMP	;OUTPUT CURRENT PICTURE
	STA	ZX,ROTATE
	LDA	Z,CNTDWN	;DON'T UPDATE IN "FREEZE"
	BNE	SLNEXT
	JSR	A,UPDATE
SLNEXT:				;DO NEXT SUB
	DEX
	DEX
	BMI	20$
	JMP	A,SUBLP
20$:	JSR	A,SONAR
	JSR	A,MESSOUT	;MESSAGES, START BUTTONS
	JSR	A,SUBCOL	;CHECK MOTION COLLISIONS
	JSR	A,BAKLIT	;BACKLIGHT "SONAR"
	.PAGE
	.SBTTL	TORPEDO LOOP
;
;HANDLE THE TORPEDOES NOW
;
	LDX	I,0A		;X=TORP#
TORPLP:	LDY	I,0		;GET CORRESPONDING SUB #
	TXA			;AND PUT IN Y
	ROR
	ROR
	BCC	10$
	LDY	I,2
10$:	LDA	AY,FIRE		;SEE IF FIRE BUTTON
	BPL	20$		;YES
	LDA	AY,STAT		;NO-CLEAR BIT 4 IN SUB STAT
	AND 	I,0EF
	STA	AY,STAT
20$:	LDA	ZX,STAT		;TORP ALREADY OUT?
	BMI	30$		;YES
	JMP	TL2		;NO
30$:	LDA	ZX,TIM		;EXPLODING?
	BNE	40$		;YES
	JSR	A,UPDATE	;NO
	JMP	A,TL1
40$:	DEC	ZX,TIM		;EXPLODING -- DONE EXPLODING?
	BEQ	60$		;YES
	LDY	I,TPXPL1	;NO-ALTERNATE EXPLOSION PICTURES
	LDA	Z,FRAME
	AND	I,2
	BEQ	50$
	LDY	I,TPXPL2
50$:	STY	ZX,ROTEMP
	JMP	A,TL1
60$:	LDA	ZX,STAT		;DONE EXPLODING
	AND	I,7F		;RESET STATUS
	STA	ZX,STAT
	JMP	A,TL3		;OUTPUT BLANK PICTURE
TL2:
	LDA	AY,TIM		;IF EITHER SUB IS COLLIDING,
	BNE	TL3		;DON'T ALLOW FIRING TORP
	CPY	I,0
	BEQ	10$
	LDA	Z,TIM
	BPL	20$		;BRA
10$:	LDA	Z,TIM+2
20$:	BNE	TL3
	LDA	Z,CNTDWN	;NO COLLISIONS--FREEZE MODE?
	BNE	TL3		;YES--NO FIRING
	LDA	AY,STAT		;NO--DRONE?
	BPL	TL4		;YES
	LDA	AY,FIRE		;NO--FIRE BUTTON?
	BMI	TL3		;NO
	LDA	AY,STAT		;YES-DEBOUNCED?
	AND	I,10
	BEQ	TL5		;YES START TORP
TL3:				;DON'T START TORP-PUT OUT BLANK
	LDA	I,BLANK
	STA	ZX,ROTEMP
	JMP	A,TL1
TL5:				;START TORP
	LDA	AY,STAT		;SET DEBOUNCE BIT
	ORA	I,10
	STA	AY,STAT
	LDA	AY,ROTATE	;GIVE TORP SAME MOTION AS
	ORA	I,1		;SUB THAT FIRED IT (BIT 0=1=TORP)
	STA	ZX,ROTEMP
	LDA	AY,HPOST
	STA	ZX,HPOST
	STA	AY,HPOSLST	;STORE SUBS CURRENT POSITION
	LDA	AY,VPOST
	STA	ZX,VPOST
	STA	AY,VPOSLST
	LDA	I,3F		;SET VALID POSITION TIMER
	STA	AY,POSTIM
	LDA	Z,GSTAT		;DON'T DO LAUNCH SOUND
	BPL	10$		;IN ATTRACT
	LDA	Z,SOUNDS
	ORA	I,0F
	STA	Z,SOUNDS
10$:	LDA	I,80		;UPDATE TORP STATUS WORD
	STA	ZX,STAT
	LDA	I,0		;CLEAR COLLISION TIMER
	STA	ZX,TIM
	JMP	A,TL1
TL4:	LDA	AY,FIRETIM	;DRONE FIRING
	BEQ	10$		;MUST FIRE
	LDA	AY,SHOTTIM	;TOO SOON TO FIRE?
	BNE	TL3		;YES
	JSR	A,DISTANCE	;NO-CLOSE ENOUGH?
	BCC	TL3		;NO(CARRY CLEAR)
10$:	STX	Z,TEMP1		;YES-FIRE! (CARRY SET)
	JSR	A,DLTASCRE	;GET SCORE DIFFERENCE CODE IN X
	LDA	AX,MAXFIRE	;GET NEW MAX+MIN TIMES
	STA	AY,FIRETIM
	LDA	AX,MINFIRE
	STA	AY,SHOTTIM
	LDX	Z,TEMP1		;RESTORE X
	JMP	A,TL5		;START TORP
TL1:	DEX			;NEXT TORP
	DEX
	CPX	I,2
	BEQ	4$
	JMP	TORPLP
	.SBTTL	CHECKSUM 4
	.BYTE CKSM4
	.BYTE	0,0,0,0,0,0	;SPARE
	.PAGE
	.SBTTL	GAME TIMER
;
;CHECK FOR COINS DETECTED
;
4$:	LDA	Z,$CNCT
	BEQ	5$		;NO COINS
	LDA	Z,OPTSW2	;IN FREE PLAY?
	ROR			;GET D0
	BCS	6$		;YES
	LDA	Z,OPTSW4	;IN CREDIT MODE?
	AND	I,2		;GET D1
	BNE	5$		;YES, DON'T ADD TIME
6$:	DEC	Z,$CNCT		;COINS!
	JSR	A,ADDTIME
;
;UPDATE GAME TIMER
;
5$:	BIT	Z,GSTAT
	BPL	51$
	BVS	70$
	LDA	Z,CNTDWN
	BNE	70$
	SED
	LDA	Z,GTIME		;ANY PARTS OF SECONDS LEFT?
	BNE	30$		;YES
	LDA	Z,GTIME+1	;NO - ANY SECONDS LEFT?
	BNE	10$		;YES
	LDA	Z,GTIME+2	;NO - ANY MINUTES LEFT?
	BEQ	49$		;NO - STOP GAME
	LDA	I,59		;YES - DECREMENT MINUTES AND
	STA	Z,GTIME+1	;GIVE 59 SECONDS
	LDA	Z,GTIME+2
	SEC
	SBC	I,1
	STA	Z,GTIME+2
	BPL	20$		;BRA
10$:	LDA 	Z,GTIME+1	;DECREMENT SECONDS
	SEC
	SBC	I,1
	STA	Z,GTIME+1
20$:	LDA	I,59		;GIVE 59 PARTS OF SECONDS
	STA	Z,GTIME
	BPL	40$		;BRA
30$:	LDA	Z,GTIME		;DECREMENT PARTS OF SECONDS
	SEC
	SBC	I,1
	STA	Z,GTIME
40$:				;GAME MODE
	LDA	Z,GSTAT
	ORA	I,80
	BMI	60$		;BRA
49$:	LDA	I,0FF		;FREEZE
	STA	Z,CNTDWN
	LDA	I,3
	STA	A,RSTCNTR	;REWRITE SCREEN SOON
51$:	LDA	Z,OPTSW2	;FREE PLAY?
	ROR
	BCC	50$		;NO
	LDA	Z,CNTDWN	;FREEZE MODE?
	BNE	50$		;YES
	JSR	A,GTCNMD	;NO - PUT UP FREE TIME
	LDA	AX,COINMODE	;GET LSD
	STA	Z,GTIME+1	;PUT IN SECONDS COUNTER
	LDA	AX,COINMODE+1	;GET MSD
	STA	Z,GTIME+2	;PUT IN MINUTES COUNTER
50$:				;ATTRACT MODE - GAME
	LDA	Z,SLFTST	;LOOK AT SELF-TEST SWITCH
	BMI	55$		;ONLY IN ATTRACT
	JMP	A,PWRON
55$:	LDA	Z,STAT
	AND	I,7F
	STA	Z,STAT
	LDA	Z,STAT+2
	AND	I,7F
	STA	Z,STAT+2
	LDA	Z,GSTAT
	AND	I,7F
60$:	STA	Z,GSTAT
70$:	CLD
	LDA	Z,GTIME+2	;RESET IF MORE THAN
	CMP	I,0A0		;99 MINUTES
	BCC	80$
	JMP	A,PWRON
80$:	JSR	A,NOISES	;UPDATE NOISES, DRONE COUNTERS
				;WAIT FOR VBLANK
	JMP	A,START
	.PAGE
	.SBTTL	NMI ROUTINE
;*NMI ROUTINE
;
;DESCRIPTION:
;	THIS ROUTINE (ENTERED AT 32U) VERIFIED THAT THE PROGRAM HAS BEEN
;	INITIALIZED, HANDLES THE STEERING AND ACCELERATION, AND CHECKS FOR
;	COINS.
;
NMI:	PHA			;SAVE REGS ON STACK
	TXA
	PHA
	TYA
	PHA
	CLD
	LDA	Z,TEST1		;TEST IF FIRST TIME IN
	CMP	I,55
	BNE	RSTART		;YES
	LDA	Z,TEST2		;NO-2ND TEST
	CMP	I,0AA
	BNE	RSTART		;YES
	TSX			;NO-TEST PROGRAM COUNTER
	LDA	AX,106		;GET PCH
	CMP	I,40
	BCC	STEER		;PROGRAM IS IN 2000-3FFF
RSTART:	JMP	PWRON
	.PAGE
	.SBTTL	STEERING ROUTINE
;
;EXTRACT STEERING INFORMATION
;
STEER:	LDX	I,2		;SET INDEX FOR 2 PLAYERS
STRLP:	LDA	Z,CNTDWN	;NO STEERING DURING FREEZE
	BNE	NEXT
	LDA	ZX,STAT		;DRONE?
	BMI	10$		;NO
	JMP	A,AUTOSTR	;YES
10$:	LDA	ZX,STRFLG	;SEE IF CHANGE SINCE LAST CHECK
	BPL	STR		;NO
	LDA	ZX,STRDIR	;YES, FIND DIRECTION
	BPL	CCW		;1=CW, 0=CCW
;TURNING CLOCKWISE
CW:	LDA	I,60
	ORA	ZX,STAT		;SET FLAG & DIRECTION IN STATUS WORD
	STA	ZX,STAT
	BNE	STR		;BRA
;TURNING COUNTER-CLOCKWISE
CCW:	LDA	I,40
	ORA	ZX,STAT		;SET FLAG
	AND	I,0DF		;CLEAR DIRECTION
	STA	ZX,STAT
;
;DO THE STEERING
;
STR:	BIT	A,VBLANK	;DO STEERING ONLY
	BMI	NEXT		;DURING VBLANK
	LDA	ZX,STAT		;SEE IF STEERING
	ASL			;WAS SENSED
	BPL	NEXT		;NO
	ASL			;SEE IF CW OR CCW
	BMI	10$		;CW
	LDA	I,-2		;CCW
	CLC
	ADC	ZX,ROTEMP
	STA	ZX,ROTEMP
	AND	I,0F8		;ROTATION SHOULD BE 00-C0
	CMP	I,0F8		;SEE IF VALID
	BNE	20$		;YES
	LDA	I,0B8		;NO, MAKE IT VALID
	BMI	30$		;BRA
10$:	LDA	I,2		;CW
	CLC
	ADC	ZX,ROTEMP
	CMP	I,0C0		;SEE IF VALID
	BCC	30$		;ROTATE IS LESS THAN C1 (VALID)
	LDA	I,0		;GREATER THAN C0-RESET TO 0
30$:	STA	ZX,ROTEMP	;UPDATE ROTATION
20$:	LDA	I,0BF
	AND	ZX,STAT		;RESET SOFTWARE FLAG
	STA	ZX,STAT
;REPEAT FOR OTHER PLAYER
NEXT:	DEX
	DEX
	BMI	10$
	JMP	STRLP
;BOTH PLAYERS DONE - RETURN FROM INTERRUPT
10$:	STA	Z,STRRST	;RESET HARDWARE STEER FLAGS
	JSR	A,MOOLAH	;DETECT COINS
30$:	PLA			;RESTORE REGISTERS
	TAY
	PLA
	TAX
	PLA
	RTI
	.PAGE
	.SBTTL	ADD TIME ROUTINE
;
;*ADD TIME SUBROUTINE
;
;	THIS ROUTINE ADDS THE TIME PER
;	COIN (STORED IN THE COINMODE TABLE)
;	(BASED ON TH OPTION SWITCHES) TO
;	THE GAME TIMER.
;
ADDTIME:
	SED
	JSR	A,GTCNMD	;GET INDEX (INX) OF COIN MODE
	LDA	AX,COINMODE	;GET SECONDS
	CLC
	ADC	Z,GTIME+1	;ADD TO CURRENT SECONDS
	CMP	I,60		;OVERFLOW?
	BCC	10$		;NO
	SBC	I,60		;YES - SUBTRACT 60 AND SET CARRY
10$:	STA	Z,GTIME+1
	LDA	AX,COINMODE+1	;GET MINUTES
	ADC	Z,GTIME+2	;ADD TO CURRENT MINUTES
	BCS	20$
	STA	Z,GTIME+2
20$:	CLD
	RTS
	.PAGE
	.SBTTL	DRONE STEERING ROUTINE
;
;*AUTOMATIC STEERING ROUTINE
;
;THIS ROUTINE SIMULATES THE STEERING WHEEL OF A DRONE.  FIRST, BASED ON THE
;DELTA SCORE THE ROUTINE IS EITHER CONTINUED OR EXITED TO EFFECT A VARIABLE
;UPDATE RATE.  IF THE ROUTINE IS CONTINUED, THE DRONE AIMS TOWARDS THE PLAYER'S
;LAST KNOWN POSITION (IF RECENT ENOUGH) OR RELIES ON 6 BITS OF INFO USED IN THE
;SONAR ROUTINE.  THE STATUS WORD IS UPDATED ACCORDINGLY:
;
;	BIT 6	- STEERING IS REQUIRED
;	BIT 5	- 0=CCW
;		- 1=CW
;
AUTOSTR:
	LDA	ZX,STAT		;PFLD COLLISION?
	AND	I,8
	BEQ	4$		;NO
	LDA	Z,FRAME		;YES-SEMI-RANDOM CW OR CCW
	BPL	2$
	JMP	A,CCW
2$:	JMP	A,CW
4$:	BIT	A,VBLANK
	BPL	5$
	JMP	A,STR
5$:	STX	Z,NTEMP1	;SAVE X
	TXA			;GET DRONE # IN Y
	TAY
	JSR	A,DLTASCORE	;GET SCORE CODE IN X
	STX	Z,NTEMP2	;SAVE CODE IN NTEMP2
	LDA	AX,DRNMSK	;GET RATE-OF-TURNING MASK
	LDX	Z,NTEMP1	;RESTORE X
	AND	Z,FRAME		;UPDATE THIS FRAME?
	BEQ	ASYES		;YES
	JMP	A,STR		;NO
ASYES:	LDY	I,0		;GET PLAYER # IN Y
	CPX	I,0
	BNE	5$
	LDY	I,2
5$:	LDA	Z,NTEMP2	;GET DELTA SCORE CODE
	CMP	I,5		;GREATER THAN 4?
	BCC	10$		;NO - PROCEED NORMALLY
	LDA	AY,VPOS		;YES - MAKE HIM "PEEK"
	STA	AY,VPOSLST
	LDA	AY,HPOS
	STA	AY,HPOSLST
	JMP	A,ASPNT1
10$:	LDA	AY,POSTIM	;ARE HPOSLST AND VPOSLST VALID?
	BNE	ASPNT1		;YES
	LDA	AY,BLPCNT	;NO, CAN I SEE SONAR?
	BEQ	20$		;YES
	JMP	A,STR		;NO
20$:	LDA	AY,BLPNUM	;USE SONAR
	PHA
	ASL			;BIT 3-5=VPOS
	ASL
	AND	I,0E0
	STA	AY,VPOSLST
	PLA
	ROR			;BIT 0-2=HPOS
	ROR
	ROR
	ROR
	AND	I,0E0
	STA	AY,HPOSLST
ASPNT1:
	LDA	I,0
	STA	Z,NTEMP1	;SIGN WORD
	LDA	ZX,HPOST
	SEC
	SBC	AY,HPOSLST	;SOURCE-DESTINATION
	STA	Z,NTEMP2	;DELTA H
	ROL	Z,NTEMP1	;SAVE SIGN(CARRY) IN SIGN WORD
	LDA	Z,NTEMP1
	LSR
	BCS	10$		;IF CARRY CLEAR, BORROW, NEGATE DELTA H
	LDA	I,0
	SEC
	SBC	Z,NTEMP2
	STA	Z,NTEMP2	;DELTA H
10$:	LDA	ZX,VPOST
	SEC
	SBC	AY,VPOSLST	;SOURCE-DESTINATION
	STA	Z,NTEMP3	;DELTA V
	ROL	Z,NTEMP1	;CARRY TO SIGN WORD
	LDA	Z,NTEMP1
	LSR
	BCS	ASPNT2		;CARRY SET-OK
	LDA	I,0		;CARRY CLEAR-COMPLEMENT DELTA V
	SEC
	SBC	Z,NTEMP3
	STA	Z,NTEMP3	;DELTA V
ASPNT2:
;TANGENT THETA = V/H
	LDA	Z,NTEMP3	;DON'T DIVIDE INTO 0
	STA	Z,NTEMP3+1	;IF V=0, THEN V/H=0
	BEQ	ASPNT3
	LDA	I,0FF		;IF H=0, V/H=FF
	STA	Z,NTEMP3+1
	LDY	Z,NTEMP2
	BEQ	ASPNT3		;H=0
;DIVIDE DELTA V (NTEMP3) BY DELTA H (NTEMP2).
;LEAVES QUOTIENT IN NTEMP3+1 AND REMAINDER IN A
;
DIVIDE:
	LDA	I,0
	STA	Z,NTEMP3+1
	LDY	I,12.		;12 BIT MULTI-WORD DIVIDE
10$:	ASL	Z,NTEMP3+1
	ROL	Z,NTEMP2	;DOUBLE PRECISION DIVIDE
	ROL
	BCS	1$
	CMP	Z,NTEMP3	;TRIAL SUBTRACT
	BCC	20$		;IF DIVISOR LARGER, JUST SHIFT
1$:	SBC	Z,NTEMP3	;READ SUBTRACT
	INC	Z,NTEMP3+1	;PUT IT INTO QUOTIENT
20$:	DEY
	BNE	10$		;DO NEXT BIT
;
;INTERPOLATE WITH THE TANGENT TABLE AT 15 DEGREE INCREMENTS (24 ROTATIONS)
;
ASPNT3:
	LDY	I,6		;SEVEN ENTRIES
	LDA	Z,NTEMP2
	BNE	ASPNT5
ASPNT4:
	DEY			;NEXT TABLE ENTRY
	BEQ	ASPNT5		;USE ZERO ENTRY
	LDA	AY,TANGENTS	;GET TABLE ENTRY
	CMP	Z,NTEMP3+1
	BCC	ASPNT4		;TANGENT .LT. RESULT
	SEC
	SBC	Z,NTEMP3+1	;HOW CLOSE TO TABLE ENTRY
	STA	Z,NTEMP4
	LDA	AY,TANGENTS+1	;NEXT BIGGER ENTRY
	SEC
	SBC	Z,NTEMP3+1	;HOW CLOSE TO THIS ENTRY?
	CMP	Z,NTEMP4	;COMPARE DIFFERENCE
	BCS	ASPNT5
	INY			;BIGGER ONE WAS CLOSER
;
;NOW WE HAVE (IN Y) THE ROTATION (BETWEEN 0 AND 6) WITHIN A QUADRANT.
;THE QUADRANT IS IN NTEMP1.  WE NEED TO CONVERT THESE TWO NUMBERS TO
;AN ACTUAL ROTATION, COMPARE TO CURRENT ROTATION, AND TURN EITHER
;CW OR CCW (OR DON'T TURN)
;
ASPNT5:
	STY	Z,NTEMP2	;SAVE ROTATION
	LDY	Z,NTEMP1	;GET QUADRANT
	LDA	AY,ROTOFST	;GET THAT QUADRANT'S OFFSET
	CLC
	ADC	Z,NTEMP2	;ADD IN ROTATION
	STA	Z,NTEMP2	;NTEMP2=DESIRED ROTATION
	LDA	ZX,ROTATE	;GET ACTUAL ROTATION
	LSR			;NORMALIZE IT
	LSR
	LSR
	CMP	I,18		;EXPLOSION PICTURE
	BCS	PNTNO		;YES-BAIL OUT!!!!!
	SEC			;NO
	SBC	Z,NTEMP2	;FIND DIFFERENCE
	BNE	ASPNT9
PNTNO:	JMP	A,STR		;ALREADY HEADED CORRECTLY
				;BORROW?
ASPNT9:	BCC	ASPNT6		;YES-CURRENT .LT. DESIRED
	CMP	I,0C		;NO-CURRENT .GT. DESIRED
				;OVER HALF WAY?
	BCC	PNTCCW		;NO-POINT CCW
	BCS	PNTCW		;YES-POINT CW
ASPNT6:				;CURRENT .LT. DESIRED
	CMP	I,-12.		;OVER HALF WAY?
	BCS	PNTCW		;YES-POINT CW
PNTCCW:	JMP	A,CCW		;YES-POINT CCW
PNTCW:	JMP	A,CW		;POINT CW
;*TANGENT TABLE
;
;THIS TABLE IS USED IN THE AUTO STEERING
;ROUTINE.  IT GIVES 16*TAN(THETA).
;
TANGENTS:
	.BYTE	255.		;90 DEG
	.BYTE	60.		;75 DEG
	.BYTE	28.		;60 DEG
	.BYTE	16.		;45 DEG
	.BYTE	9.		;30 DEG
	.BYTE	4.		;15 DEG
	.BYTE	0.		;0 DEG
;*ROTATION OFFSETS
;
;THIS TABLE GIVES THE ROTATION OFFSET FOR EACH QUADRANT.
ROTOFST:
	.BYTE	6,0,12.,18.	;QUAD 0,1,2,3
	.SBTTL	POSITION UPDATE ROUTINE
;
;*POSITION UPDATE ROUTINE
;
;REGISTERS:
;
;USED:		A,X,Y	RESTORED: X
;
;STACK USE:
;
;ONE SUBROUTINE
;
;BASE PAGE USED:
;	VEL,DIRECT,TEMP4,TEMP4+1
;
;BASE PAGE ALTERED:
;	TEMP1,TEMP2,TEMP3,HPOSL,HPOST,VPOSL,VPOST
;
;SUBROUTINES CALLED:
;	MULT
;
;DESCRIPTION:
;	THE DIRECTION IS USED TO INDEX TO A SINE-COSINE TABLE TO GET A
;	NORMALIZED H AND V OFFSET.  THESE NUMBERS ARE MULTIPLIED BY THE
;	VELOCITY TO GIVE ACTUAL V AND H OFFSETS.  THE OFFSETS ARE ADDED
;	TO THE OLD POSITION TO GET THE NEW POSITION.
;
;FIND NEW HORIZONTAL POSITION
;
UPDATE: LDA	ZX,STAT		;CLEAR PLAYFIELD STATUS
	AND	I,0F7
	STA	ZX,STAT
	STX	Z,TEMP1		;SAVE X IN TEMP1
	LDA	I,0C		;SUB SPEED
	CPX	I,3
	BCC	30$
	CLC
	ADC	I,10		;TORP SPEED
30$:
	STA	Z,TEMP2		;VEL TO TEMP2
	LDA	ZX,ROTEMP
	LSR
	LSR
	LSR
	STA	Z,TEMP1+1	;ROTATION INDEX TO TEMP1+1
	TAX
	CLC
	LDA	AX,HOFST	;RAW H.OFFSET=F[ROTATION]
	BEQ	U2		;NO HORIZ CHANGE
	TAX			;OFFSET TO X
	JSR	A,MULT		;HOFST*VEL DIVIDE BY 8
	LDX	Z,TEMP1		;RESTORE X
	LDA	Z,TEMP4		;GET LOW BYTE OF HORIZ. OFFSET (ACTUAL)
	CLC
	ADC	ZX,HPOSL	;UPDATE LOW BYTE H. POSITION
	STA	ZX,HPOSL
	LDA	Z,TEMP4+1	;UPDATE HIGH BYTE
U2:	LDX	Z,TEMP1		;RESTORE X
	ADC	ZX,HPOST
	STA	Z,TEMP3
;
;
;FIND NEW VERTICAL POSITION
;
	LDX	Z,TEMP1+1	;GET SAVED ROTATION INDEX
	CLC
	LDA	AX,VOFST	;GET RAW V. OFFSET
	BEQ	U3		;NO VERTICAL CHANGE
	TAX
	JSR	A,MULT		;RAW V. OFFSET*VEL DIVIDE BY 8
	LDX	Z,TEMP1		;RESTORE X
	LDA	Z,TEMP4		;GET LOW BYTE OF V. OFFSET
	CLC
	ADC	ZX,VPOSL	;UPDATE LOW BYTE VPOS
	STA	ZX,VPOSL
	LDA	Z,TEMP4+1	;UPDATE HI BYTE VPOS
U3:	LDX	Z,TEMP1		;RESTORE X
	ADC	ZX,VPOST
	STA	Z,TEMP3+1
;
;FIND FRONT POINT OF SUB
;
	LDX	Z,TEMP1+1	;GET SAVED ROTATION INDEX
	LDY	Z,TEMP1
	CPY	I,3		;TORP OR SUB?
	BCC	4$		;SUB
	LDA	AX,TPHOFST	;TORP
	JMP	5$
4$:	LDA	AX,HDSPLC	;GET HORIZONTAL DISPLACEMENT
5$:	CLC
	ADC	Z,TEMP3		;NEW HPOS
	STA	Z,TEMP2		;HPOS FOR FRONT TO TEMP2
	CPY	I,3
	BCC	6$
	LDA	AX,TPVOFST
	JMP	7$
6$:	LDA	AX,VDSPLC	;GET VERTICAL DISPLACEMENT
7$:	CLC
	ADC	Z,TEMP3+1	;NEW VPOS
	STA	Z,TEMP2+1	;VPOS FOR FRONT TO TEMP2+1
	JSR	A,CHECK		;CHECK FOR COLLISION
	BCS	10$		;YES
	LDA	Z,TEMP3		;NO-UPDATE HPOS & VPOS
	STA	AY,HPOST
	LDA	Z,TEMP3+1
	STA	AY,VPOST
	JMP	A,REAR		;CHECK REAR
10$:	CPY	I,3		;IS IT A SUB OR TORP
	BCS	15$		;TORP
	LDA	Z,GSTAT		;SUB - START CRASH SOUND
	ORA	I,1
	STA	Z,GSTAT		;GSTAT BIT 0=CRASH FLAG
	JMP 	17$
15$:	LDA	I,MISSMAX	;TORP - START MISS SOUND
	STA 	A,MISSCNTR
	LDA	I,20		;START COL. TIMER
	STA	AY,TIM
17$:	LDA	AY,STAT		;UPDATE STATUS
	ORA	I,8
	STA	AY,STAT
18$:	LDX	Z,TEMP1+1	;TRY AGAIN, BUT THIS TIME
	LDA	AX,HDSPLC	;USE NEW HPOS & OLD VPOS
	CLC
	ADC	Z,TEMP3
	STA	Z,TEMP2
	LDA	AX,VDSPLC
	CLC
	ADC	AY,VPOST
	STA	Z,TEMP2+1
	JSR	A,CHECK
	BCS	20$		;COLLISION
	LDA 	Z,TEMP3		;NO COLLISION-UPDATE ONLY HPOS
	STA 	AY,HPOST
	JMP	A,REAR
20$:	LDX	Z,TEMP1+1	;COLLISION-TRY AGAIN
	LDA	AX,HDSPLC	;BUT THIS TIME USE
	CLC			;OLD HPOS AND NEW VPOS
	ADC	AY,HPOST
	STA	Z,TEMP2
	LDA	AX,VDSPLC
	CLC
	ADC	Z,TEMP3+1
	STA	Z,TEMP2+1
	JSR	A,CHECK
	BCS	REAR		;COLLISION-USE OLD V & HPOS
	LDA	Z,TEMP3+1	;NO COLLISION-UPDATE ONLY
	STA	AY,VPOST	;VPOS
;
;DO SAME FOR REAR POINT OF SUB
;
REAR:	LDX	Z,TEMP1+1	;GET SAVED ROTATION INDEX
	CPY	I,3		;TORP OR SUB?
	BCC	4$		;SUB
	LDA	AX,TPHOFST	;TORP
	JMP	5$
4$:	LDA	AX,HDSPLC	;GET HORIZONTAL DISPLACEMENT
5$:	EOR	I,0FF		;GET TWO'S COMPLEMENT
	SEC
	ADC	AY,HPOST
	STA	Z,TEMP2		;HPOS FOR REAR 10 TEMP2
	CPY	I,3
	BCC	6$
	LDA	AX,TPVOFST
	JMP	7$
6$:	LDA	AX,VDSPLC	;GET VERTICAL DISPLACEMENT
7$:	EOR	I,0FF		;GET TWO'S COMPLEMENT
	SEC
	ADC	AY,VPOST
	STA	Z,TEMP2+1	;VPOS FOR REAR TO TEMP2+1
	JSR	A,CHECK		;CHECK FOR COLLISION
	BCC	20$		;NO COLLISION
10$:	CPY	I,3		;IS IT A SUB OR TORP?
	BCS	15$		;TORP
	LDA	Z,GSTAT		;SUB - START CRASH SOUND
	ORA	I,1
	STA	Z,GSTAT		;GSTAT BIT 0=CRASH FLAG
	BNE	17$		;BRA
15$:	LDA	I,MISSMAX	;TORP - START MISS SOUND
	STA	A,MISSCNTR
	LDA	I,20		;START TIMER
	STA	AY,TIM
17$:	LDA	AY,STAT		;UPDATE STATUS
	ORA	I,8
	STA	AY,STAT
20$:	LDX	Z,TEMP1		;RESTORE X
	RTS
	.PAGE
	.SBTTL	MULTIPLY ROUTINE
;*MULTIPLY ROUTINE
;
;REGISTERS:
;
;USED:		A,X	RESTORED:
;
;STACK USE:
;	NONE
;
;BASE PAGE USED:
;	TEMP2
;
;BASE PAGE ALTERED:
;	TEMP2+1,TEMP4,TEMP4+1
;
;SUBROUTINES CALLED:
;	NONE
;
;DESCRIPTION:
;	ENTERED WITH INTEGER RAW OFFSET IN X, VELOCITY IN TEMP2.
;	THESE TWO ARE SIGNED MULTIPLIED WITH THE RESULT PUT IN
;	TEMP4 AND TEMP4+1.
;
MULT:	STX	Z,TEMP2+1	;PUT RAW OFFSET IN TEMP2+1
	TXA
	BPL	M3		;IF POSITIVE OFFSET, DON'T ALTER
	EOR	I,0FF		;IF NEGATIVE OFFSET, NEGATE IT
	TAX
	INX			;TWO'S COMPLEMENT
M3:	LDA	I,0
	STA	Z,TEMP4		;CLEAR SPACE FOR RESULT
	STA	Z,TEMP4+1
M2:	LDA	Z,TEMP4
	CLC
	ADC	Z,TEMP2		;ADD VELOCITY
	STA	Z,TEMP4		;PUT IN RESULT
	BCC	10$
	INC	Z,TEMP4+1	;CARRY
10$:	DEX			;DO IT UNTIL X(OFFSET)=0
	BNE	M2
	LDA	Z,TEMP2+1	;SEE IF OFFSET + OR -
	BPL	M1		;PLUS-DONE
	LDA	I,0		;MINUS-NEGATE OFFSET
	SEC
	SBC	Z,TEMP4
	STA	Z,TEMP4
	LDA	I,0
	SBC	Z,TEMP4+1
	STA	Z,TEMP4+1
M1:	RTS
	.PAGE
	.SBTTL	CHECKSUM 5
	.BYTE	CKSM5		;*RESERVED FOR CHECKSUMS 5*
	.BYTE	0,0		;SPARE
	.PAGE
	.SBTTL	PLAYFIELD COLLISION DETECTION
;
;*CHECK SUBROUTINE
;
;THIS SUBROUTINE TAKE THE HPOS (TEMP2) AND THE
;VPOS (TEMP2+1), FIGURES OUT WHAT PLAYFIELD
;POSITION THEY CORRESPOND TO, AND SETS THE
;CARRY IF THAT POSITION IS IN COLLISION	
;WITH AN ISLAND OR THE BOUNDARY.
;
;
CHECK:
;
;CONVERT HPOS,VPOS TO STAMP NUMBER
;
;THIS ROUTIE TAKES THE HPOS (TEMP2)
;AND THE VPOS, (TEMP2+1) AND PUTS THE
;ADDRESS OF THE CORRESPONDING STAMP IN
;TEMP4 (LO BYTE) AND TEMP4+1 (HI BYTE).
;THE OFFSET WITHIN THE STAMP IS PUT IN
;TEMP2 (H) AND TEMP2+1 (V).
;
;A=800+[(VPOS-8) DIV. 8]*20+)HPOS-8) DIV 8 (HEX)
;
	LDA 	I,0	
	STA	Z,TEMP4+1	;CLEAR HI BYTE OF ANSWER
	LDA	Z,TEMP2+1	;GET VPOS
	SEC
	SBC	I,7		;SUBTRACT PLAYFIELD-MOTIION OFFSET*
	TAX
	AND	I,07		;V OFFSET WITHIN STAMP TO TEMP2+1
	STA	Z,TEMP2+1
	TXA
	AND	I,0F8		;DIVIDE BY 8, MULTIPLY BY 8
	ASL			;MULLIPLY BY 2
	ROL	Z,TEMP4+1	;CARRY TO HI BYTE
	ASL			;MULTIPLY BY 2
	ROL	Z,TEMP4+1	;CARRY TO HI BYTE
	STA	Z,TEMP4		;RESULT IN LO BYTE
	LDA	Z,TEMP2		;GET HPOS
	SEC
	SBC	I,6		;SUBTRACT PLAYFIELD-MOTION OFFSET **
	TAX
	AND 	I,07		;H OFFSET WITHIN STAMP TO TEMP2
	STA	Z,TEMP2
	TXA
	LSR			;DIVIDE BY 8
	LSR
	LSR
	CLC
	ADC	Z,TEMP4		;ADD TO LO BYTE
	STA	Z,TEMP4
	LDA	I,8
	ADC	Z,TEMP4+1	;800+CARRY FROM LO BYTE + PREVIOUS
	STA	Z,TEMP4+1
	LDY	Z,TEMP1		;USE Y FOR SUB #
	LDX	I,0
	LDA	NX,TEMP4	;GET PLAYFIELD STAMP
	AND	I,3F		;STRIP OFF SCREEN BITS
	CMP	I,1B		;IF BLANK OR LETTER,
	BCC	CKOK		;NO COLLISIONS
				;NORMALIZE PICTURE NUMBER
	SBC	I,1B
	TAX			;PICTURE NUMBER INDEX TO X
	LDA	AX,HBOUND	;GET HORIZ BOUNDARIES
	LSR
	LSR			;GET TOP BOUNDARY
	LSR
	LSR
	CMP	Z,TEMP2+1	;COMPARE TO VERT DISPLACEMENT
	BEQ	10$
	BCS	CKOK		;NO COLLISION
10$:	LDA	AX,HBOUND	;TRY BOTTOM BOUNDARY
	AND	I,0F
	CMP	Z,TEMP2+1
	BCC	CKOK		;NO COLLISION
	LDA	AX,VBOUND	;TRY LEFT BOUNDARY
	LSR
	LSR
	LSR
	LSR
	CMP	Z,TEMP2
	BEQ	20$
	BCS	CKOK		;NO COLLISION
20$:	LDA	AX,VBOUND	;TRY RIGHT BOUNDARY
	AND	I,0F
	CMP	Z,TEMP2
	BCC	CKOK		;NO COLLISION
	SEC			;COLLISION-SET CARRY FLAG
	RTS
CKOK:	CLC			;NO COLLISION-CLEAR CARRY FLAG
	RTS
	.SBTTL	RANDOM POSITION ROUTINE
;
;*RANDOM POSITION ROUTINE
;
;	THIS ROUTINE GENERATES A RANDOM HPOST,VPOST,
;	AND ROTATION FOR ONE SUB (SUB # IN X REG.)
;
RANDOM:	LDA	Z,FRAME		;GET RANDOM ROTATION
	AND	I,0F8
	CMP	I,0C0		;MAX IS C0
	BCC	10$		;ALREADY LESS THAN C0
	AND	I,78		;MAKE IT LESS THAN C0
10$:	STA	ZX,ROTATE
	STA	ZX,ROTEMP
	LDA	Z,FRAME		;GET RANDOM HPOS
	CMP	I,0D8		;SEE IF WITHIN BOUNDARIES
	BCC	11$
	SEC			;IF NOT, MAKE IT WITHIN BOUNDARY
	SBC	I,28
11$:	CMP	I,38
	BCS	12$
	CLC
	ADC	I,38
12$:	STA	ZX,HPOST
	ROL			;DO SAME FOR VPOST
	ROL
	ROL
	ROL
	CMP	I,0C8
	BCC	13$
	SEC
	SBC	I,38
13$:	CMP	I,28
	BCS	14$
	CLC
	ADC	I,28
14$:	STA	ZX,VPOST
	CMP	I,70		;CHECK 1ST ISLAND BOUNDARIES
	BCS	ROK
	CMP	I,28
	BCC	ROK
	LDA	ZX,HPOST
	CMP	I,7A
	BCS	ROK
	CMP	I,43
	BCC	ROK
	ADC	I,50
	STA	ZX,HPOST
ROK:	LDA	ZX,VPOST	;CHECK 2ND ISLAND BOUNDARIES
	CMP	I,0BC
	BCS	RDONE
	CMP	I,79
	BCC	RDONE
	LDA	ZX,HPOST
	CMP	I,0C4
	BCS	RDONE
	CMP	I,8B
	BCC	RDONE
	SBC	I,50
	STA	ZX,HPOST
RDONE:	STX	Z,TEMP4		;SAVE X
	JSR	A,SUBCOL	;MAKE SURE NO MOTION COLLISIONS
	LDX	Z,TEMP4
	LDA	ZX,STAT
	AND 	I,0F7		;CLEAR PFLD COLLISION FLAG
	STA	ZX,STAT
	AND	I,6
	BEQ	30$
	LDA	Z,FRAME
	CLC
	ADC	I,10
	STA	Z,FRAME
	JMP	A,RANDOM
30$:	RTS
	.PAGE
	.SBTTL	MOTION OBJECT OUTPUT ROUTINE
;*MOTION OBJECT OUTPUT ROUTINE
;
;OUTPUT ONE MOTION OBJECT
;
TRAN1:  LDA	AY,HPOST
	STA	ZX,HPOS
	LDA	AY,VPOST
	STA	ZX,VPOS
	RTS
;
;OUTPUT ALL MOTION OBJECTS
;
TRANS: LDY	I,0A		;A AND 6 ARE MUXED ON 6
	LDA	Z,FRAME		;8 AND 4 ARE MUXED ON 4
	ROR
	BCC	10$
	LDY	I,6
10$:	LDX	I,6
	JSR	TRAN1
	LDA	AY,ROTEMP
	STA	ZX,ROTATE
	DEY
	DEY
	LDX	I,4
	JSR	TRAN1
	LDA	AY,ROTEMP
	STA	ZX,ROTATE
	LDX	I,2		;DO SUBS NOW
	LDY	I,2
	JSR	TRAN1
	LDX	I,0
	LDY	I,0
	JSR	TRAN1
	RTS
	.PAGE
	.SBTTL	INITIALIZATION ROUTINE
;
;*INITIALIZE SUBS TO STARTING POINT
;
INITIL:	LDX	I,10.
30$:	LDA	I,BLANK		;BLANK TORPS
	STA	ZX,ROTEMP
	LDA	I,0
	STA	ZX,STAT		;CLEAR TORP STAT
	DEX
	DEX
	CPX	I,2
	BNE	30$
	LDX	I,2
10$:	JSR	A,RANDOM	;GET RANDOM POSITION
	LDA	Z,FRAME
	CLC
	ADC	I,20
	STA	Z,FRAME
	LDA	ZX,STAT		;CLEAR COLLISION STATUS
	AND	I,0F1
	STA	ZX,STAT
	DEX
	DEX
	BPL	10$
	LDA	I,0		;INITIALIZE SOUNDS
	STA	Z,SOUNDS
	STA	A,XPLCNTR
	STA	A,MISSCNTR
	RTS
	.PAGE
	.SBTTL	PLAYFIELD OUTPUT ROUTINES
;
;*PLAYFIELD OUTPUT ROUTINE (ISLANDS, ALPHAS)
;
PFOUT:	LDA	A,RSTCNTR
	PHA
	JSR	A,CLRSCRN
	PLA
	STA	A,RSTCNTR
;OUTPUT "YOUR SCORE" AND "ENEMY SCORE" IN CORRECT LANGUAGE
	JSR	A,GTLNGX	;GET LANG. INDEX IN X
	LDA	AX,YRSCR
	STA	Z,TEMP2
	LDA	AX,YRSCR+1
	STA	Z,TEMP2+1
	LDY	I,31.		;32 BYTES LONG
20$:	LDA	NY,TEMP2
	ORA	I,0C0		;MAKE VISIBLE
	STA	AY,PF
	DEY
	BPL	20$
;OUTPUT ISLANDS, PART OF BOUNDARY AND "TIME"
PO1:
	LDX	I,117.		;COUNTER FOR ADDRESS TABLE
10$:	TXA
	LSR
	TAY			;COUNTER FOR DATA TABLE
	LDA	AX,PFADR
	STA	Z,TEMP1+1
	DEX
	LDA	AX,PFADR
	STA	Z,TEMP1
	LDA	AY,PFTABL
				;***
				;*ORA I,0C0 -- 09 C0
				;* FOR DEBUGGING
				;***
	LDY	I,0
	STA	NY,TEMP1
	DEX
	BPL	10$
;OUTPUT THE REST OF THE BOUNDARY
	LDY	I,29.		;30 BLOCKS PER AREA
	LDA	I,1B		;* CHANGE TO DB FOR VISIBLE
20$:	LDX	AY,PF1		;GET ADDRESS IN FIRST AREA
	STA	AX,PF		;PUT THE BLOCK THERE
	LDX	AY,PF2		;ETC. FOR REST OF AREAS
	STA	AX,PF+80
	LDX	AY,PF3
	STA	AX,PF+200
	LDX	AY,PF4
	STA	AX,PF+300
	DEY
	BPL	20$
	RTS
;*SCORE OUTPUT ROUTINE
;
;BIT 7=SCREEN 1	BIT 6=SCREEN 2
;
SCROUT:
	LDA	Z,SCORED	;GET HIGH BYTE OF PLAYER 0 SCORE
	LSR
	LSR
	LSR
	LSR
	ORA	I,70		;MAKE IT VISIBLE ON HIS SCREEN
	STA	A,SCRAD1	;STORE IT IN FIRST SPOT
	AND 	I,3F		;MAKE IT VISIBLE ON OTHER SCREEN
	ORA	I,80
	STA	A,SCRAD2+2	;STORE IT IN 4TH SPOT
	LDA	A,SCORED	;GET LOW BYTE & REPEAT
	AND	I,0F
	ORA	I,70
	STA	A,SCRAD1+1
	AND	I,3F
	ORA	I,80
	STA	A,SCRAD2+3
	LDA	Z,SCORED+2	;NOW DO IT FOR PLAYER 2
	LSR
	LSR
	LSR
	LSR
	ORA	I,70
	STA	A,SCRAD2	;3RD SPOT
	AND	I,3F
	ORA	I,80
	STA	A,SCRAD1+2	;2ND SPOT
	LDA	Z,SCORED+2
	AND 	I,0F
	ORA	I,70
	STA	A,SCRAD2+1
	AND	I,3F
	ORA	I,80
	STA	A,SCRAD1+3
;TIME OUTPUT
	LDA	Z,GTIME+1
	JSR	A,UNPACK
	STX	A,TIMADR+4
	STA	A,TIMADR+3
	LDA	Z,GTIME+2
	JSR 	A,UNPACK
	STX	A,TIMADR+1
	CMP	I,0F0		;SUPRESS LEADING ZERO
	BNE	10$
	LDA	I,0
10$:	STA	A,TIMADR
	LDA	I,0EC		;COLON
	STA	A,TIMADR+2
	LDX	I,4
	LDA	Z,GTIME+2	;15 SECONDS LEFT?
	BNE	20$		;NO
	LDA	Z,GTIME+1
	BEQ	20$		;NO
	CMP	I,16
	BCS	20$		;NO
	LDA	Z,OPTSW2	;FREE PLAY?
	ROR
	BCS	20$		;YES
	LDA	Z,OPTSW4	;NO
	AND	I,2		;TIME MODE?
	BNE	20$		;NO
	LDA	Z,FRAME		;YES-FLASH "TIME"
	AND	I,10
	BEQ	20$
15$:	LDA	AX,0B44		;OFF THIS FRAME
	AND	I,3F
	STA	AX,0B44
	LDA	AX,0B64
	AND	I,3F
	STA	AX,0B64
	DEX
	BPL	15$
	BMI	30$
20$:	LDA	AX,0B44		;ON THIS FRAME
	ORA	I,0C0
	STA	AX,0B44
	LDA	AX,0B64
	ORA	I,0C0
	STA	AX,0B64
	DEX
	BPL	20$
30$:	RTS
;
;*UNPACK ROUTINE
;
;	THIS ROUTINE BREAKS A BYTE (IN ACC) INTO
;	TWO NIBBLES, MAKES IT VISIBLE ON BOTH SCREENS,
;	AND MAKES IT AN ASCII NUMBER. THE HIGH NIBBLE
;	IS RETURNED IN THE ACC AND THE LOW NIBBLE IN X.
;
UNPACK:
	TAY			;SAVE A
	ORA	I,0F0		;BIT 7,6=SCREEN
				;BIT 5,4=ASCII
	TAX			;LOW NIBBLE IN X
	TYA			;RESTORE A
	LSR			;GET HIGH NIBBLE
	LSR
	LSR
	LSR
	ORA	I,0F0		;MAKE VISIBLE
	RTS
	.PAGE
	.SBTTL	BACKLIGHT "SONAR" ROUTINE
;
;*HIGHLIGHT THE WORD "SONAR" ON THE OVERLAY. (LIGHT IT IN THE CORRECT
; PLACE ON THE CORRECT SCREEN)
;
BAKLIT:
	LDX	I,4
	LDA	Z,FRAME		;ON THIS FRAME?
	AND	I,18
	BEQ	20$		;NO
10$:	LDA	I,9B		;YES-BIT 7=PLAYER 2
	STA	AX,0AC0
	LDA	I,5B		;BIT 6=PLAYER 0
	STA	AX,0ADB
	LDA	I,5B		;*6B FOR SMALLER BLOCK WON'T WORK!
	STA	AX,0ABB
	LDA	I,9B		;*AB WON'T WORK!
	STA	AX,0AA0
	DEX
	BPL	10$
	BMI	40$
20$:	LDA	I,1B		;OFF THIS FRAME
30$:	STA	AX,0AC0
	STA	AX,0ADB
	STA	AX,0AA0
	STA	AX,0ABB
	DEX
	BPL	30$
40$:	RTS
	.SBTTL	MOTION COLLISION DETECTION
;*MOTION OBJECT COLLISON ROUTINE
;
;REGISTERS:
;
;USED:		A,X,Y	RESTORED:	X
;
;STACK USE:	NONE
;
;BASE PAGE USED:
;		HPOST,VPOST
;
;BASE PAGE ALTERED:
;		STAT,TEMP1
;
;SUBROUTINES CALLED:
;		NONE
;
;DESCRIPTION:
;		THIS ROUTINE CHECKS FOR A COLLISION BETWEEN ALL MOTION
;		OBJECT.
;		STATUS BIT 1 IS SET IF COLLIDING WITH A SUB, BIT 2 IF
;		COLLIDING WITH A TORPEDO.
;
SUBCOL:	LDX	I,0A		;CLEAR COLLISION STATUS
10$:	LDA	ZX,STAT
	AND	I,0F9
	STA	ZX,STAT
	DEX
	DEX
	BPL	10$
;
;TEST SUB-SUB COLLISION
;
SS1:	LDX	I,2
	LDY	I,0
;TEST HORIZONTAL
	LDA	ZX,HPOST	;COMPARE
	SEC
	SBC	AY,HPOST
	BPL	10$
	CMP	I,-8
	BCS	SS2		;X CLOSE, CHECK Y
	BCC	ST1		;NO COLLISION
10$:	CMP	I,9
	BCS	ST1		;NO COLLISION
;TEST VERTICAL
SS2:	LDA	ZX,VPOST	;COMPARE
	SEC
	SBC	AY,VPOST
	BPL	20$
	CMP	I,-8
	BCS	SS3		;COLLISION
	BCC	ST1		;NO COLLISION
20$:	CMP	I,9
	BCS	ST1		;NO COLLISION
;COLLISION-SET FLAGS
SS3:	LDA	ZX,STAT
	ORA	I,2		;BIT 1=SUB COLLISION
	STA	ZX,STAT
	LDA	AY,STAT
	ORA	I,2
	STA	AY,STAT
	LDA	Z,GSTAT		;START CRASH SOUND
	ORA	I,1
	STA	Z,GSTAT
;
;TEST SUB-TORP COLLISIONS
;
ST1:
	LDX	I,0A		;Y=0
	JSR	A,SBTPCOL
	LDX	I,6		;Y=0
	JSR	A,SBTPCOL
	LDY	I,2
	LDX	I,4
	JSR	A,SBTPCOL
	LDX	I,8		;Y=2
	JSR	A,SBTPCOL
;
;TEST TORP-TORP COLLISIONS
;
TT1:
	LDY	I,6		;X=8
	JSR	A,TPTPCOL
	LDY	I,0A		;X=8
	JSR	A,TPTPCOL
	LDX	I,4		;Y=A
	JSR	A,TPTPCOL
	LDY	I,6		;X=4
	JSR	A,TPTPCOL
	RTS
;
;*SUB-TORP COLLISIONS
;
;THIS ROUTINE (ENTERED WITH SUB # IN Y AND TORP # IN X) DETERMINES IF THERE
;IS A COLLISION, SETS THE STATUS FLAGS, STARTS THE EXPLOSION SOUND, STARTS
;THE COLLISION TIMERS AND ADDS TO THE SCORE.  (X AND Y MUST BE RESTORED)
;
;GET FRONT POINT OF TORP
;
SBTPCOL:
	STX	Z,TEMP1+1	;SAVE X
	STY	Z,TEMP1		;SAVE Y
	LDA	ZX,ROTEMP	;IS TORP BLANK OR EXPLODED?
	CMP	I,TPXPL1
	BCC	10$		;NO
	RTS			;YES-IGNORE IT
10$:	LSR			;NO-FIND FRONT POINT OF TORP
	LSR
	LSR
	TAY			;ROTATION INDEX TO Y
	LDA	AY,TPVOFST
	CLC
	ADC	ZX,VPOST
	STA	Z,TEMP2		;VPOS OF FRONT POINT OF TORP
	LDA	AY,TPHOFST
	CLC
	ADC	ZX,HPOST
	STA	Z,TEMP2+1	;HPOS OF FRONT POINT OF TORP
	JSR	A,STCK		;CHECK FOR COLLISION WITH FRONT
	BCC	STYES		;CARRY CLEAR-COLLISION!!
	LDX	Z,TEMP1+1	;CARRY SET-NO COLLISION
	LDA	ZX,ROTEMP	;TRY FOR BACK POINT NOW
	LSR
	LSR
	LSR
	TAY
	SEC			;NEGATE THE OFFSET
	LDA	I,0
	SBC	AY,TPVOFST
	CLC
	ADC	ZX,VPOST
	STA	Z,TEMP2
	SEC
	LDA	I,0
	SBC	AY,TPHOFST
	CLC
	ADC	ZX,HPOST
	STA	Z,TEMP2+1
	JSR	A,STCK
	BCC	STYES		;CARRY CLEAR-COLLISIONS!!
STNO:	LDX	Z,TEMP1+1	;NO COLLISIN--RESTORE X
	LDY	Z,TEMP1		;RESTORE Y
	RTS
STYES:				;COLLISION!
	LDX	Z,TEMP1+1	;RESTORE X AND Y
	LDY	Z,TEMP1
	LDA	ZX,STAT		;SET SUB FLAG IN TORP STAT
	ORA	I,2
	STA	ZX,STAT
	LDA	AY,STAT		;SET TORP FLAG IN SUB STAT
	ORA	I,4
	STA	AY,STAT
	LDA	I,3F		;START EXPLOSION SOUND
	STA	A,XPLCNTR
	LDA	Z,CNTDWN	;FREEZE--SCORE!
	BNE	STSCR
	LDA	Z,GSTAT
	BPL	STNSCR		;ATTRACT--NO SCORE (AHHHHHHH) - CUTE, REAL CUTE JOHN
STSCR:	SED			;ADD 1 TO OTHER SUB'S SCORE
	LDA	I,1
	CPY	I,2		;IS THIS SUB 2?
	CLC
	BEQ	10$		;YA SURE - ADD TO SUB 0
	ADC	Z,SCORED+2	;NO ADD TO SUB 2
	STA	Z,SCORED+2
	BNE	20$		;BRA
10$:	ADC	Z,SCORED	;ADD 1 TO SUB 0
	STA	Z,SCORED
20$:	CLD
STNSCR:	LDA	I,20		;SET COLLISION TIMERS
	STA	AY,TIM
	STA	ZX,TIM
	RTS
;
;*SUB-TORP COLLISION CHECK
;
;THIS ROUTINE TAKES THE POINT OF THE TORP IN TEMP2 AND TEMP2+1 AND
;CLEARS THE CARRY IF IT IS IN COLLISION WITH THE SUB.  CARRY IS SET
;IF NO COLLISION.
;
STCK:	LDX	Z,TEMP1		;PUT SUB # IN X
	LDA	ZX,ROTEMP
	LSR
	LSR
	LSR
	TAY			;ROTATION INDEX TO Y
STCOL1:
	LDA	ZX,HPOST	;SUB HPOS
	SEC
	SBC	Z,TEMP2+1	;MINUS TORP HPOS
	BCS	20$		;NO-BORROW
	EOR	I,0FF		;BORROW-NEGATE IT
	ADC	I,1
20$:	CMP	AY,SBHOFST	;POSITIVE-CLOSE ENOUGH?
	BCS	STEXIT		;NO
	LDA	ZX,VPOST	;YES-TRY VERT
	SEC
	SBC	Z,TEMP2
	BCS	30$
	EOR	I,0FF
	ADC	I,1
30$:	CMP	AY,SBVOFST
STEXIT:	RTS			;COLLISION!!!!!!!!
;
;*TORP-TORP COLLISIONS
;
;THIS ROUTINE (ENTERED WITH THE TORP NUMBERS IN X AND Y) DETERMINES IF THERE
;IS A COLLISION, SETS THE STATUS FLAGS, STARTS THE "MISS" SOUND AND STARTS
;THE TIMERS.  (X AND Y MUST BE RESTORED).
;
TPTPCOL:
	LDA	I,TPXPL1-1	;IS EITHER TORP BLANK OR EXPLODED?
	CMP	ZX,ROTEMP
	BCC	10$		;YES
	CMP	AY,ROTEMP
	BCS	20$		;NO
10$:	RTS			;YES
20$:	LDA	ZX,HPOST	;NO--COMPARE H
	SEC
	SBC	AY,HPOST
	BPL	25$
	CMP	I,-4
	BCS	30$		;H CLOSE, CHECK V
	BCC	10$		;NO COLLISION
25$:	CMP	I,5
	BCS	10$		;NO COLLISION
30$:	LDA	ZX,VPOST	;COMPARE
	SEC
	SBC	AY,VPOST
	BPL	40$
	CMP	I,-4
	BCS	TTCOL1		;COLLISION!
	BCC	10$		;NO COLLISION
40$:	CMP	I,5
	BCS	10$		;NO COLLISION
;COLLISION--SET FLAGS, ETC.
TTCOL1:
	LDA	ZX,STAT		;SET TORP FLAG IN BOTH
	ORA	I,4		;STATUS WORDS
	STA	ZX,STAT
	LDA	AY,STAT
	ORA	I,4
	STA	AY,STAT
	LDA	I,MISSMAX	;START "MISS" SOUND
	STA	A,MISSCNTR
	LDA	I,20		;START TIMERS
	STA	AY,TIM
	STA	ZX,TIM
	RTS
;
;*TORP OFFSET TABLES
;
;THESE TABLES GIVE THE VERTICAL AND HORIZONTAL OFFSETS FROM THE CENTER OF
;THE TORP TO THE FRONT END.
;
TPVOFST:			;VERTICAL
	.BYTE	-2,-2,-2,-2,-1,-1
	.BYTE	0,1,1,2,2,2
	.BYTE	2,2,2,2,1,1
	.BYTE	0,-1,-1,-2,-2,-2
TPHOFST:			;HORIZONTAL
	.BYTE	0,1,1,2,2,2
	.BYTE	2,2,2,2,1,1
	.BYTE	0,-1,-1,-2,-2,-2
	.BYTE	-2,-2,-2,-2,-1,-1
;
;*SUB OFFSET TABLES
;
;THESE TABLES GIVE THE VERTICAL AND HORIZONTAL OFFSETS TO A RECTANGLE
;CONSTRUCTED AROUND THE SUB.
;
SBVOFST:			;VERTICAL
	.BYTE	8,8,8,7,5,5
	.BYTE	3,5,6,6,7,8
	.BYTE	8,8,7,6,6,5
	.BYTE	3,4,5,7,8,8
SBHOFST:			;HORIZONTAL
	.BYTE	3,4,5,7,8,8
	.BYTE	8,8,8,7,5,4
	.BYTE	3,5,6,6,7,8
	.BYTE	8,8,7,6,6,5
	.SBTTL	CHECKSUM 6
	.BYTE CKSM6
	.BYTE	0,0,0,0,0,0	;SPARE
	.PAGE
	.SBTTL	SOUND, COUNTER UPDATE ROUTINES
;
;*SOUND UPDATE ROUTINE
;
;THIS ROUTINE IS ACCESSED FROM BOTH THE
;ATTRACT MODE AND THE PLAY MODE.
;
NOISES:
	STA	Z,WDOG
	LDA	Z,CNTDWN	;SOUNDS DURING FREEZE
	BNE	5$
	LDA	Z,GSTAT		;NO SOUNDS DURING ATTRACT
	BMI	5$
	JMP	DC1
5$:	LDA	Z,FRAME		;UPDATE LAUNCH SND
	AND	I,03
	BNE	10$
	LDA	Z,SOUNDS
	AND	I,0F
	BEQ	10$
	DEC	Z,SOUNDS
10$:	LDA	A,XPLCNTR	;UPDATE EXPLOSION COUNTER
	BEQ	40$
	LDA	Z,FRAME
	AND	I,1
	BNE	40$
	DEC	A,XPLCNTR
40$:	LDA	A,MISSCNTR	;UPDATE MISS COUNTER
	BEQ	N1
	LDA	Z,FRAME
	AND	I,0
	BNE	N1
	DEC	A,MISSCNTR
;
;SET PRIORITIES
;
N1:	LDA	A,XPLCNTR	;EXPLOSION HAS PRIORITY
	CMP	I,10		;IF GREATER THAN N
	BCS	40$		;GREATER - OUTPUT
	LDY	I,0		;LESS - CHECK OTHERS
	LDA	Z,GSTAT
	BPL	10$
	LDA	Z,CNTDWN
	BNE	10$
	LDA	Z,GSTAT		;CHECK CRASH FLAG
	ROR
	BCC	10$		;OFF - Y=0
	LDA	Z,HPOSL		;GET RANDOM NUMBER TO MAKE
	EOR	Z,VPOSL		;CRASH SOUND
	EOR	Z,HPOSL+2
	EOR	Z,VPOSL+2
	EOR	Z,FRAME
	EOR	Z,BLPNTR
	EOR	Z,BLPCNT
	EOR	Z,BLPNTR+2
	EOR	Z,BLPCNT+2
	EOR	Z,BLPNUM
	EOR	Z,BLPNUM+2
	ROL			;GET LSN IN MSN
	ROL
	ROL
	ROL
	CMP	I,60		;SEE IF LOUD ENOUGH
	BCS	5$		;YES
	ADC	I,60		;NO - INCREASE IT
5$:	TAY			;PUT RANDOM IN Y
10$:	LDA	A,MISSCNTR	;GET MISS SOUND
	ASL
	ASL
	STY	Z,TEMP1		;SUM WITH CRASH SOUND
	CLC
	ADC	Z,TEMP1
	BCC	20$		;DON'T OVERFLOW
	LDA	I,0F0
20$:	TAY			;CRASH + MISS IN Y
	CMP	I,10		;IF LOW VOLLUME, ALLOW EXPLOSION
	BCS	30$		;IS THER IS ONE
	LDA	A,XPLCNTR
	BNE	40$		;DO EXPLOSION
;OUTPUT MISS AND CRASH
30$:	LDA	I,0		;KILL QUIET EXPLOSIONS
	STA	A,XPLCNTR
	STA	Z,XPLDOFF	;EXPLODE OFF
	STA	Z,CRSHON	;CRASH ON
	TYA			;GET CRASH + MISS
	JMP	60$
;
;OUTPUT EXPLOSION
;
40$:	STA	Z,XPLDON	;EXPLODE ON
	STA	Z,CRSHOFF	;CRASH OFF
	LDA	A,XPLCNTR
	ASL
	ASL
60$:	AND	I,0F0		;EXPLODE/CRASH BITS 4-7
	STA	Z,TEMP1
	LDA	Z,SOUNDS
	AND	I,0F
	ORA	Z,TEMP1
	STA	Z,SOUNDS
	LDA	Z,GSTAT		;CLEAR CRASH FLAG
	AND	I,0FE
	STA	Z,GSTAT
;UPDATE DRONE COUNTERS
DC1:
	LDX	I,2
1$:	LDA	Z,FRAME		;START WITH MAX. COUNTER
	AND	I,0F		;UPDATE EVERY N FRAMES
	BNE	10$		;NOT THIS ONE
	LDA	AX,FIRETIM	;THIS ONE
	BEQ	10$		;BUT NOT IF ZERO
	DEC	AX,FIRETIM	;ELSE DO IT
10$:	LDA	Z,FRAME		;REPEAT FOR MIN. TIMER
	AND	I,07
	BNE	15$
	LDA	AX,SHOTTIM
	BEQ	15$
	DEC	AX,SHOTTIM
15$:	LDA	Z,FRAME		;REPEAT FOR
	AND	I,1		;VALID POSITION TIMERS
	BNE	16$
	LDA	AX,POSTIM
	BEQ	16$
	DEC	AX,POSTIM
16$:	LDA	ZX,STAT		;ANY COLLISIONS?
	AND	I,0E
	BEQ	17$		;NO
	LDA	ZX,HPOS		;YES-KEEP POSITION
	STA	ZX,HPOSLST
	LDA	ZX,VPOS
	STA	ZX,VPOSLST
	LDA	I,3F
	STA	AX,POSTIM	;SET VALID POS. TIMER
17$:	DEX			;DO OTHER DRONE
	DEX
	BPL	1$
;UPDATE RESET COUNTER
	LDA	Z,GSTAT		;ATTRACT?
	BMI	50$		;NO-GAME
	LDA	Z,FRAME		;YES-4 SEC UP?
	BNE	50$		;NO
	DEC	A,RSTCNTR	;YES-DEC COUNTER
	BPL	50$		;2 MIN UP?-NO
	LDA	I,1F		;YES-RESET COUNTER
	STA	A,RSTCNTR
	JSR	A,INITIL	;START SUBS
	JSR	A,PFOUT		;RE-WRITE PFLD
;WAIT FOR VBLANK
50$:	LDA Z,VBLANK
	BMI 50$
	RTS

	.SBTTL	DRONE DIFFICULTY DETERMINATION
;
;*DELTA SCORE ROUTINE
;
;	THIS ROUTINE RETURNS (IN X) A CODE REPRESENTING THE DIFFERENCE IN
;	SCORE BETWEEN A DRONE AND A PLAYER.  (A CONSTANT IS RETURNED FOR
;	2 DRONES. I.E. THE ATTRACT MODE).
;
;	0 - DRONE IS WINNING
;	1 - PLAYER IS 0 OR 1 AHEAD
;	2 - PLAYER IS 2 OR 3 AHEAD
;	3 - PLAYER IS 4 OR 5 AHEAD
;	4 - PLAYER IS 6 OR MORE AHEAD
;	5 - IS 8 OR MORE AHEAD
;
;	ENTERED WITH DRONE # IN Y
;
DLTASCRE:
10$:	LDX	I,0
	LDA	Z,GSTAT		;ATTRACT MODE?
	BPL	40$		;YES-RETURN CONSTANT
	LDA	Z,SCORED	;GAME MODE
	CPY	I,2		;IS DRONE #2?
	BEQ	20$		;YES-PLAYER IS #0
	LDA	Z,SCORED+2	;NO-PLAYER IS #2
20$:	SEC
	SED
	SBC	AY,SCORED	;PLAYER-DRONE
	CLD
	BCC	60$		;CARRY CLEAR=BORROW. DRONE IS AHEAD.
	CMP	I,2
	BCC	50$		;PLAYER IS 0 OR 1 AHEAD
	CMP	I,4
	BCC	40$		;PLAYER IS 2 OR 3 AHEAD
	CMP	I,6
	BCC	30$		;PLAYER IS 4 OR 5 AHEAD
	CMP	I,8
	BCC	25$		;PLAYER IS 6 OR 7 AHEAD
	INX			;PLAYER IS 8 OR MORE AHEAD
25$:	INX
30$:	INX
40$:	INX
50$:	INX
60$:	RTS
	.PAGE
	.SBTTL	DISTANCE-TO-DRONE ROUTINE
;
;*DISTANCE SUBROUTINE
;
;	THIS ROUTINE USES HPOS AND VPOS TO GET THE DISTANCE BETWEEN THE SUBS.
;	IT THEN CHECKS DELTASCORE TO DETERMINE IF A SHOT SHOULD BE FIRED.
;	THE CARRY IS SET IF A SHOT SHOULD BE FIRED, CLEARED OTHERWISE.
;
DISTANCE:
	STX	Z,TEMP1		;SAVE X
	LDA	Z,HPOS		;GET DELTA H
	SEC
	SBC	Z,HPOS+2
	BCS	10$		;NO BORROW
	EOR	I,0FF		;BORROW-COMPLEMENT RESULT
	ADC	I,1		;TWO'S COMPLEMENT
10$:	CMP	I,80		;OUT OF RANGE?
	BCS	DDNO		;YES-DON'T FIRE
	STA	Z,TEMP3+1
	LDA	Z,VPOS		;NOW REPEAT FOR DELTA V
	SEC
	SBC	Z,VPOS+2
	BCS	20$
	EOR	I,0FF
	ADC	I,1
20$:	CMP	I,80
DDNO:	BCS	DNO		;OUT OF RANGE - DON'T FIRE
	CLC
	ADC	Z,TEMP3+1	;NOW WE HAVE (H+V) DIVIDE 2
				;(MOST SIGNIFICANT BYTE)
	ROR
	STA	Z,TEMP3
	JSR	A,DLTASCRE	;GET DELTA SCORE CODE IN X
	LDA	Z,TEMP3
	CMP	I,10		;IS IT VERY CLOSE?
	BCC	DYES		;YES-FIRE!!
	CMP	I,18		;NO-IS IT SORTA CLOSE?
	BCC	30$		;YES-CHECK SCORE CODE
	CMP	I,20
	BCC	35$
	CMP	I,30		;ETC.
	BCC	40$
	CMP	I,40
	BCC	50$
	CPX	I,0		;REALLY FAR AWAY
	BEQ	DYES		;ONLY IF DRONE IS AHEAD
	BNE	DNO		;OTHERWISE - DON'T FIRE
30$:	CPX	I,5		;SORTA CLOSE-CHECK CODE
	BCC	DYES		;ETC.
	BCS	DNO
35$:	CPX	I,4
	BCC	DYES
	BCS	DNO
40$:	CPX	I,3
	BCC	DYES
	BCS	DNO
50$:	CPX	I,2
	BCC	DYES
DNO:	CLC			;DON'T FIRE-CLC
	BCC	DDONE
DYES:	SEC			;FIRE!!! - SEC
DDONE:	LDX	Z,TEMP1		;RESTORE X
	RTS
	.PAGE
	.SBTTL	MESSAGE ROUTINE
;
;*MESSAGE OUTPUT AND START BUTTON ROUTINE
;
;	THIS ROUTINE CHECKS FOR START BUTTONS, OUTPUTS
;	MESSAGES, AND HANDLES THE START LAMPS.
;
;
MESSOUT:
	;CHECK START BUTTONS
	LDX	I,2
10$:	LDA	ZX,STRTSW	;DOES THIS PLAYER WANT TO START?
	BMI	50$		;NO
	LDA	Z,CNTDWN	;YES-IS IT MID-GAME?
	BNE	20$		;NO
	LDA	Z,GSTAT
	BMI	50$		;YES-IGNORE
20$:	LDA	Z,OPTSW4	;NO-CREDIT MODE OR TIME MODE?
	AND	I,2		;GET D1
	BNE	60$		;CREDIT MODE
	LDA	Z,GTIME+2	;TIME MODE-IS THERE TIME?
	BNE	30$		;YES
	LDA	Z,GTIME+1
	BNE	30$		;YES
	BEQ	50$		;NO, BRA--WHAT?? NO BRA?!!! (SHAME ON YOU)
60$:	LDA	ZX,STAT		;CREDIT MODE-IS HE STARTED?
	BMI	50$		;YES-IGNORE HIM
	LDA	Z,OPTSW2
	ROR
	BCS	30$
	LDA	Z,$CNCT		;NO-DOES HE HAVE GOOD CREDIT?
	BEQ	50$		;NO IGNORE HIM
25$:	DEC	Z,$CNCT		;YES-TAKE HIS MONEY
30$:	LDA	Z,GSTAT		;GAME STARTED?
	BMI	40$		;YES
	ORA	I,0C0		;NO-START IT
	STA	Z,GSTAT
40$:	LDA	ZX,STAT		;NO - START HIM
	ORA	I,80
	STA	ZX,STAT
50$:	DEX			;DO NEXT PLAYER
	DEX
	BPL 	10$
	LDA	Z,STAT		;BOTH PLAYER IN?
	BPL	MESSMASK	;NO
	LDA	Z,STAT+2
	BPL	MESSMASK	;NO
	LDA	I,0		;YES - KILL COUNTDOWN
	STA	Z,CNTDWN
	.PAGE
;
;NOW GENERATE THE MASK USED TO OUTPUT
;THE MESSAGE. THE MASK WILL BE FROMED IN
;TEMP1 AS FOLLOWS:
;
;	D7 - COIN MESSAGE - PLAYER 2
;	D6 -		  - PLAYER 0
;	D5 - PRESS START  - PLAYER 2
;	D4 - 		  - PLAYER 0
;	D3 - BATTLE STATIONS - PLAYER 2
;	D2 - 		     - PLAYER 0
;	D1 - INSERT COIN - PLAYER 2
;	D0 -		 - PLAYER 0
;
MESSMASK:
	LDA	Z,FRAME		;TO SAVE TIME
	AND 	I,0F
	BEQ	2$
	RTS
2$:	STA	Z,LMPOFF	;START LAMPS OFF
	STA	Z,LMPOFF+2
	LDA	I,0
	STA	Z,TEMP1		;CLEAR MASK
1$:	BIT	Z,GSTAT		;ATTRACT MODE?
	BPL	5$		;YES
	LDA	Z,CNTDWN	;NO-FREEZE MODE?
	BEQ	MM1		;NO-NO MESSAGES
5$:	LDA	Z,OPTSW2	;FREE PLAY MODE?
	ROR			;GET BIT 0
	BCS	MM2		;YES-TREAT MESSAGES LIKE TIME
	LDA	Z,OPTSW4	;TIME MODE OR CREDIT MODE?
	AND	I,2		;GET D1
	BNE	MM3		;CREDIT MODE
MM2:				;ATTRACT OR FREEZE MODE
	LDA	Z,TEMP1
	ORA	I,0C0		;ENABLE COIN MESSAGE ON BOTH SCREENS
	STA	Z,TEMP1
	LDA	Z,FRAME		;IS FALSH ON THIS FRAME?
	AND	I,10
	BEQ	60$		;NO
	LDA	Z,GTIME+2	;YES - IS THERE TIME?
	BNE	10$		;YES
	LDA	Z,GTIME+1
	BEQ	MM1		;NO
10$:	LDA	Z,TEMP1		;YES
	BIT	Z,STAT		;IS #0 A PLAYER?
	BPL	20$		;NO
	ORA	I,4		;YES - SAY "BATTLE STATIONS"
	BNE	30$		;BRA
20$:	ORA	I,10		;SAY "PRESS START"
30$:	BIT	Z,STAT+2	;SAME FOR #2
	BPL	40$
	ORA	I,8
	BNE	50$
40$:	ORA	I,20
50$:	STA	Z,TEMP1
60$:	LDA	Z,OPTSW2	;IS IT FREE PLAY?
	ROR
	BCC	MM4		;NO
MM1:	JMP	MESSGEN		;YES
MM4:	LDA	Z,TEMP1		;NO-PUT UP "INSERT COINS"
	ORA	I,3
	STA	Z,TEMP1
	BNE	MESSGEN		;BRA
MM3:				;CREDIT MODE
	LDA	Z,$CNCT		;DOES HE HAVE CREDIT?
	BNE	5$		;YES, PUT OUT MESSAGE
	LDA	Z,GSTAT		;NO, IN FREEZE?
	BPL	10$		;NO, DON'T PUT IT OUT
5$:	LDA	Z,TEMP1		;YES, PROMPT NON-PLAYER
	BIT	Z,STAT		;IS HE A PLAYER YET?
	BMI	20$		;YES-DON'T BOTHER HIM
	ORA	I,40		;NO-BUG HIM
20$:	BIT	Z,STAT+2	;SAME FOR PLAYER #2
	BMI	30$
	ORA	I,80
30$:	STA	Z,TEMP1
10$:	LDA	Z,$CNCT		;2 OR MORE CREDITS?
	CMP	I,2
	BCS	40$		;YES-DON'T PUT "INSERT COINS"
	CMP	I,1		;1 CREDIT?
	BNE	15$		;NO
	LDA	Z,GSTAT		;YES, GAME STARTED?
	BMI	40$		;YES, DON'T SAY "INSERT"
15$:	LDA	Z,TEMP1		;NO-PUT "INSERT COINS"
	BIT	Z,STAT		;DON'T BUG IF HE IS A PLAYER
	BMI	50$
	ORA	I,1
50$:	BIT	Z,STAT+2	;SAME FOR #2
	BMI	60$
	ORA	I,2
60$:	STA	Z,TEMP1
40$:	LDA	Z,FRAME		;FLASH REST
	AND	I,10
	BEQ	MESSGEN
	LDA	Z,TEMP1		;YES-IS HE A PLAYER?
	BIT	Z,STAT
	BPL	70$		;NO
	ORA	I,4		;YES-PUT UP "BATTLE STATIONS"
70$:	BIT	Z,STAT+2	;SAME FOR #2
	BPL	80$
	ORA	I,8
80$:	STA	Z,TEMP1
	LDA	Z,$CNCT		;NOW "PRESS START" -- IS THERE CREDIT?
	BEQ	MESSGEN		;NO-DON'T PUT IT OUT
	LDA	Z,TEMP1		;YES-BUT ONLY PUT OUT IF NOT A PLAYER
	BIT	Z,STAT
	BMI	90$
	ORA	I,10
90$:	BIT	Z,STAT+2
	BMI	100$
	ORA	I,20
100$:	STA	Z,TEMP1
	.PAGE
;
;NOW GENERATE THE MESSAGE USING THE MESSAGE MASK
;(TEMPS1). PUT IT OUT IN THE CORRECT LANGUAGE.
;HANDLE THE START LAMPS TOO.
;
MESSGEN:			;FIRST DO THE COIN MODE
1$:	LDA	Z,TEMP1		;GET COIN MODE MESSAGE MASK
	AND	I,0C0
	STA	Z,TEMP1+1	;STORE IN TEMP1+1
	JSR	A,GTLNGX	;GET LANG. INDEX IN X
	LDA	Z,OPTSW2	;IS IT FREE PLAY MODE?
	ROR
	BCC	2$		;NO
	JMP	A,MG2		;YES
2$:	LDA	Z,OPTSW4
	AND	I,2
	BNE	MG4		;CREDIT MODE
	JSR	A,GTCNMD	;NO - GET COIN MODE INDEX (IN X)
	LDA	AX,COINMODE	;GET COIN MODE LS DIGIT
	AND	I,0F
	ORA	I,30
	ORA	Z,TEMP1+1
	STA	A,09CC
	LDA	AX,COINMODE	;GET COIN MODE MIDDLE DIGIT
	LSR
	LSR
	LSR
	LSR
	ORA	I,30
	ORA	Z,TEMP1+1
	STA	A,09CB
	LDA	I,2C		;PUT OUT COLON
	ORA	Z,TEMP1+1
	STA	A,09CA
	LDA	AX,COINMODE+1	;GET COIN MODE MS DIGIT
	ORA	I,30
	ORA	Z,TEMP1+1
	STA	A,09C9
	LDA	I,0
	STA	A,09CD
;PUT OUT "PER COIN" IN CORRECT LANGUAGE
	JSR	A,GTLNGX	;GET LAN. INDEX IN X
	LDA	AX,PRCOIN	;GET LOW ADDRESS
	STA	Z,TEMP2		;PUT IN TEMP 2
	LDA	AX,PRCOIN+1	;HIGH ADDRESS
	STA	Z,TEMP2+1	;TO TEMP2 + 1
	LDY 	I,9		;MESSAGE LENGTH = 10
10$:	LDA	NY,TEMP2	;GET ACTUAL LETTER
	AND	I,3F		;STRIP OFF SCREEN BITS
	ORA	Z,TEMP1+1	;PUT ON ACTUAL SCREEN BITS
	STA	AY,09CE		;PUT IT ON THE SCREEN
	DEY
	BPL	10$
	BMI	MG2		;BRA - SKIP OTHER MESSAGE
MG4:
	LDA	AX,YUHAV
	STA	Z,TEMP2
	LDA	AX,YUHAV+1
	STA	Z,TEMP2+1
	LDY	I,18.		;MESSAGE LENGTH=19
5$:	TYA			;IS THIS THE SPOT WHERE THE
	CMP	AX,CRDADR	;NUMBER OF CREDITS GOES?
	BNE	6$		;NO
	DEY			;YES, DON'T OUTPUT A BLANK
6$:	CMP	I,17.		;NO, IS IT THE "S" IN CREDITS?
	BNE	10$		;NO
	CPX	I,0		;YES, ENGLISH?
	BNE	10$		;NO
	LDA	Z,$CNCT		;YES, 1 CREDIT?
	CMP	I,1
	BNE	10$		;NO
	STA	AY,09C7		;YES, BLANK THE "S" IN CREDITS
	DEY			;DON'T PUT THE "S" OUT
10$:	LDA	NY,TEMP2
	AND	I,3F
	ORA	Z,TEMP1+1
	STA	AY,09C7
	DEY
	BPL	5$
	LDY	AX,CRDADR	;GET OFFSET FOR CREDIT DIGIT
	LDA	I,4		;OVER 4 CREDITS, PUT OUT "4"
	CMP	Z,$CNCT
	BCC	20$
	LDA	Z,$CNCT		;UNDER 4, PUT OUT NUMBER
20$:	ORA	I,30		;MAKE VISIBLE
	ORA	Z,TEMP1+1
	STA	AY,09C7
;NOW DO THE "PRESS START" MESSAGE
;(ALSO DO THE START LAMPS)
;(PRESS START MASK IS IN BITS 5 AND 4 OF TEMP1)
;
MG2:
	LDA	Z,TEMP1		;GET "PRESS START" MASK IN
	ASL			;BITS 7 AND 6 OF TEMP1+1
	ASL
	AND	I,0C0
	STA	Z,TEMP1+1
	;DO START LAMPS -- IF PRESS START IS ON, START
	;LAMP SHOULD ALSO BE ON
	BPL	10$		;PLAYER 2 OFF
	STA	Z,LMPON+2	;PLAYER 2 ON
10$:	BIT	Z,TEMP1+1	;CHECK PLAYER 0
	BVC	20$		;PLAYER 0 OFF
	STA	Z,LMPON		;PLAYER 0 ON
20$:	LDA	Z,STAT		;IF EITHER IS A PLAYER,
	BPL	30$		;TURN HIS LIGHT ON
	STA	Z,LMPON
30$:	LDA	Z,STAT+2
	BPL	40$
	STA	Z,LMPON+2
	;PUT OUT "PUSH" AND "START" NOW
40$:	LDA	AX,PSH		;(SIMILAR TO "PER COIN")
	STA	Z,TEMP2
	LDA	AX,PSH+1
	STA	Z,TEMP2+1
	LDY	I,20.		;MESSAGE LENGTH=21
50$:	LDA	NY,TEMP2
	AND	I,3F
	ORA	Z,TEMP1+1
	STA	AY,0AA6
	DEY
	BPL	50$
MG3:
	;PUT OUT "BATTLE STATIONS" NOW
	;MASK BITS ARE IN BITS 3 AND 2 OF TEMP1
;THIS MESSAGE DOESN'T EXIST IN FRENCH OR SPANISH
	CPX	I,2		;FRENCH?
	BEQ	MG5		;YES-DON'T PUT MESSAGE OUT
	CPX	I,4		;SPANISH?
	BEQ	MG5		;YES-DON'T PUT MESSAGE OUT
	LDA	Z,TEMP1
	ASL
	ASL
	ASL
	ASL
	AND	I,0C0
	STA	Z,TEMP1+1
	LDA	AX,PREPARE
	STA	Z,TEMP2
	LDA	AX,PREPARE+1
	STA	Z,TEMP2+1
	LDY	I,17.		;MESSAGE LENGTH=18
10$:	LDA	NY,TEMP2
	AND	I,3F
	ORA	Z,TEMP1+1
	STA	AY,0AC7
	DEY
	BPL	10$
MG5:
;PUT OUT "INSERT COINS" NOW
;MASK BITS ARE IN BITS 1 AND 0 OF TEMP1
	LDA	Z,TEMP1
	ROR
	ROR
	ROR
	AND	I,0C0
	STA	Z,TEMP1+1
	LDA	I,0FF
	STA	Z,TEMP3
	LDA	Z,OPTSW4	;CREDIT MODE?
	AND	I,2
	BEQ	5$		;NO
	LDA	Z,FRAME		;YES-FLASH "INSERT COIN"
	AND	I,10
	BNE	5$
	LDA	I,0
	STA	Z,TEMP3
5$:	LDA	AX,INSRT
	STA	Z,TEMP2
	LDA	AX,INSRT+1
	STA	Z,TEMP2+1
	LDY	I,20.		;MESSAGE LENGTH=21
10$:	LDA	NY,TEMP2
	AND	I,3F
	ORA	Z,TEMP1+1
	AND	Z,TEMP3
	STA	AY,0986
	DEY
	BPL	10$
;PUT OUT "1 COIN PER PLAYER" IF IT IS IN THE "CREDIT" MODE.
;(MASK IS SAME AS "INSERT COINS")
	LDA	Z,OPTSW4
	AND	I,2
	BEQ	40$
	LDA	AX,ONECN
	STA	Z,TEMP2
	LDA	AX,ONECN+1
	STA	Z,TEMP2+1
	LDY	I,7		;MESSAGE LENGTH=8
20$:	LDA	NY,TEMP2
	AND	I,3F
	ORA	Z,TEMP1+1
	STA	AY,08CF
	DEY
	BPL	20$
	LDA	AX,PRPLYR
	STA	Z,TEMP2
	LDA	AX,PRPLYR+1
	STA	Z,TEMP2+1
	LDY	I,10.		;MESSAGE LENGTH=11
30$:	LDA	NY,TEMP2
	AND	I,3F
	ORA	Z,TEMP1+1
	STA	AY,090E
	DEY
	BPL	30$
40$:	RTS
	.PAGE
	.REPT 0
	
THE FOLLOWING ROUTINE IS FULLY DEBUGGED. IT WOULD 
REPLACE MESSGEN EXCEPT THAT IT TAKES
42 MS INSTEAD OF 4 MS. IT COULD BE USED IF THE
MESSAGE ROUTINE WAS ONLY CALLED WHEN STATES CHANGE.
	
;*MESSAGE WRITE ROUTINE
; THIS ROUTINE USES THE MESSAGE MASK
; (TEMP1) AND OUTPUTS MESSAGE IN THE
; CORRECT LANGUAGE. IT ALSO HANDLES
; THE START LAMPS.
; THE MESSAGE ARE STORED IN RAD50
; (3 BYTES STORED AS 2)
;	TEMP1 MESSAGE MASK
;	TEMP1+1 CURRENT MESSAGE MASK
;	TEMP2,2+1 ADDRESS OF WHERE TO STORE TO
;	TEMP3,3+1 ADDRESS OF RAD50 MESSAGE
;	TEMP4,4+1,4+2 DECODED RAD50 WORD
;	X OFFSET FROM START OF MESSAGE
;	Y RAD50 TABLE OFFSET
MESWRT:			;FIRST DO THE COIN MODE
	LDA	Z,TEMP1
	AND	I,0C0
	STA	Z,TEMP1+1	;STORE IN TEMP1+1
	LDA	Z,OPTSW3	;GET LANGUAGE INDEX
	AND	I,3
	ASL
	STA	A,LNGINDX	;STORE IN LANGUAGE INDEX
	LDA	Z,OPTSW2	;FREE PLAY MODE?
	ROR
	BCC	10$
	JMP	MW2		;YES-DONT PUT ;MESSAGE OUT
10$:	LDA	Z,OPTSW4	;NO-CREDIT MODE?
	AND	I,2
	BNE	MW1		;YES
				;NO TIME MODE
	JSR	A,GTCNMD	;GET COIN MODE INDEX (IN X)
	LDA	AX,COINMODE	;GET COIN MODE LS DIGIT
	PHA			;SAVE FOR MIDDLE DIGIT
	AND	I,0F		;LS DIGIT
	ORA	I,30		;ASCII
	ORA	Z,TEMP1+1	;VISIBILITY
	STA	A,09CC		;PUT IN OUT
	PLA			;GET MIDDLE DIGIT
	LSR
	LSR
	LSR
	LSR
	ORA	I,30
	ORA	Z,TEMP1+1
	STA	A,09CB		;PUT IT OUT
	LDA	I,2C		;PUT OUT COLON
	ORA	Z,TEMP1+1
	STA	A,09CA
	LDA	AX,COINMODE+1	;GET MS DIGIT
	ORA	I,30
	ORA	Z,TEMP1+1
	STA	A,09C9
;PUT OUT "PER COIN" IN CORRECT LANGUAGE
	LDX	A,LNGINDX	;GET LANGUAGE INDEX
	LDA	AX,PRCN2	;GET LOW ADDRESS OF MESS
	STA	Z,TEMP3		;PUT IN TEMP3
	LDA	AX,PRCN2+1	;GET HIGH ADDRESS
	STA	Z,TEMP3+1	;PUT IN TEMP3+1
	LDA	I,0CE		;GET LOW ADDRESS OF WHERE
				;TO STORE IT TOO
	STA	Z,TEMP2		;PUT IN TEMP2
	LDA	I,09		;GET HIGH DESTINATION
	STA	Z,TEMP2+1	;PUT IN TEMP2+1
	JSR	A,DECODE	;CONVERT RAD50 TO
				;ASCII AND OUTPUT 
				;CARRY SET-BRA
	BCS	MW2		;DONT DO OTHER MODE MESSAGE
;PUT OUT "YOU HAVE X CREDITS" NOW
MW1:	
	LDX	A,LNGINDX	;SAME AS "PER COIN"
	LDA	AX,YUHAV2	;FIRST DO "YOU HAVE"
	STA	Z,TEMP3
	LDA	AX,YUHAV2+1
	STA	Z,TEMP3+1
	LDA	I,0CF
	STA	Z,TEMP2
	LDA	I,08
	STA	Z,TEMP2+1
	JSR	A,DECODE	;CARRY IS SET
	TYA			;GET RAD50 TABLE OFFSET
	ADC	Z,TEMP3		;ADD TO TABLE ADDRESS +1 (CARRY)
	STA	Z,TEMP3
	BCC	10$
	INC	Z,TEMP3+1
10$:	LDA	I,11		;NOW DO "CREDITS"
	STA	Z,TEMP2
	LDA	I,09
	STA	Z,TEMP2+1
	JSR	A,DECODE
	LDA	A,LNGINDX	;PUT OUT "S" IN ENGLISH "CREDITS"
	BNE	20$		;NOT ENGLISH
	LDA	I,0		;ENGLISH
	LDX	Z,$CNCT		;1 CREDIT?
	CPX	I,1
	BEQ	15$		;YES-PUT OUT BLANK
	LDA	I,13		;NO-PUT OUT "S"
	ORA	Z,TEMP1+1	;MAKE VISIBLE
15$:	STA	A,0917		;PUT IT OUT
20$:	LDA	I,4		;NOW PUT OUT NUMBER OF CREDITS
	CMP	Z,$CNCT
	BCC	30$		;MORE THAN 4, PUT OUT 4
	LDA	Z,$CNCT		;LESS THEN 4, PUT OUT 0-4
30$:	ORA	I,30		;MAKE ASCII
	ORA	Z,TEMP1+1	;MAKE VISIBLE
	STA	A,090F
;
;NOW DO THE "PUSH START" MESSAGE
;(ALSO DO THE START LAMPS)
;(PRESS START MASK IS IN BITS 5 AND 4 OF TEMP1)
;
MW2:	
	LDA	Z,TEMP1		;GET "PRESS START" MASK IN
	ASL			;BITS 7 AND 6 OF TEMP1+1
	ASL
	AND	I,0C0
	STA	Z,TEMP1+1
;DO START LAMPS--IF PRESS START IS IN,
;START LAMP SHOULD ALSO BE ON.
	BPL	10$		;PLAYER 2 OFF
	STA	Z,LMPON+2	;PLAYER 2 ON
10$:	BIT 	Z,TEMP1+1
	BVC	20$		;PLAYER 0 OFF
	STA	Z,LMPON		;PLAYER 0ON
20$:	LDA	Z,STAT		;IF EITHER IS A PLAYER,
	BPL	30$		;TURN HIS LIGHT ON
	STA	Z,LMPON
30$:	LDA	Z,STAT+2
	BPL	40$
	STA	Z,LMPON+2
;NOW PUT OUT "PUSH START"
40$:	LDX	A,LNGINDX	;SAME AS "PER COIN"
	LDA	AX,PSH2
	STA	Z,TEMP3
	LDA	AX,PSH2+1
	STA	Z,TEMP3+1
	LDA	I,0A6
	STA	Z,TEMP2
	LDA	I,0A
	STA	Z,TEMP2+1
	JSR	A,DECODE
;PUT OUT "PREPARE FOR BATTLE" NOW
;MASK BITS ARE IN BITS 3 AND 2 OF TEMP1
MW3:
	LDA	Z,TEMP1		;SAME AS "PER COIN"
	ASL
	ASL
	ASL
	ASL
	AND	I,0C0
	STA	Z,TEMP1+1
	LDX	A,LNGINDX
	LDA	AX,PREPR2
	STA	Z,TEMP3
	LDA	AX,PREPR2+1
	STA	Z,TEMP3+1
	LDA	I,0C9
	STA	Z,TEMP2
	LDA	I,0A
	STA	Z,TEMP2+1
	JSR	A,DECODE
	TYA			;SAME AS "YOU HAVE X CREDITS"
	ADC	Z,TEMP3
	STA	Z,TEMP3
	BCC	10$
	INC	Z,TEMP3+1
10$:	LDA	I,09
	STA	Z,TEMP2
	LDA	I,0B
	STA	Z,TEMP2+1
	JSR	A,DECODE
;PUT OUT "INSERT COINS" NOW
;(MASK BITS ARE IN BITS 1 AND 0 OF TEMP1)
MW4:
	LDA	Z,TEMP1
	ROR
	ROR
	ROR
	AND	I,0C0
	STA	Z,TEMP1+1
	LDA	Z,OPTSW4		;CREDIT MODE?
	AND 	I,2
	BEQ	10$			;NO
	LDA	Z,FRAME			;YES--FLASH MESSAGE
	AND	I,10
	BNE	10$			;ON THIS FRAME
	LDA	I,0			;OFF THIS FRAME
	STA	Z,TEMP1+1
10$:	LDX	A,LNGINDX		;SAME AS "PER COIN"
	LDA	AX,INSRT2
	STA	Z,TEMP3
	LDA	AX,INSRT2+1
	STA	Z,TEMP3+1
	LDA	I,86
	STA	Z,TEMP2
	LDA	I,09
	STA	Z,TEMP2+1
	JSR	A,DECODE
;NOW DO "1 COIN PER PLAYER" IF IN CREDIT MODE
;(MASK SAME AS "INSERT" COINS)
	TYA				;(SAME AS "YOU HAVE X CREDITS)
	ADC	Z,TEMP3
	STA	Z,TEMP3
	BCC	20$
	INC	Z,TEMP3+1
20$:	LDA	Z,OPTSW4		;CREDIT MODE?
	AND	I,2
	BEQ	30$			;NO-DONT PUT IT OUT
	LDA	Z,TEMP1			;YES-REBUILD MASK
	ROR
	ROR
	ROR
	AND	I,0C0
	STA	Z,TEMP1+1
	LDA	I,0C6
	STA	Z,TEMP2
	LDA	I,09
	STA	Z,TEMP2+1
	JSR	A,DECODE
30$:	RTS				;DONE AT LAST!
;*DECODE RAD50 TO ASCII
;THIS ROUTINE TAKES A SOURE ADDRESS,
;GETS A RAD50 WORD, CONVERTS IT TO
;ASCII, TACKS ON THE VISIBLITY BITS,
;AND OUTPUTS TO A DESTINATION.
;THE FIRST BYTE OF EACH MESSAGE
;GIVE THE OFFSET FROM THE START
;OF THE SPACE FOR THE MESSAGE TO
;THE ACTUAL START OF THE MESSAGE
;
;	TEMP2,2+1=ADDRESS OF WHERE TO STORE TO
;	TEMP3,3+2=ADDRESS OF RAD50 MESSAGE
;		X=OFFSET FROM START OF MESSAGE
;		Y=RAD50 TABLE OFFSET
;	(X AND Y ARE DETERMINED WITHIN THIS ROUTINE)
;	TEMP1+1=VISIBLITY MASK FOR THIS MESSAGE
;	TEMP4,4+1,4+2=USED TO GENERATE 3 ASCII
;			BYTES FOR 2 RAD50 BYTES
;
DECODE:
	LDY	I,0			;RAD50 TABLE OFFSET IN Y
	LDA	NY,TEMP3		;FIRST BYTE IS OFFSET
	TAX				;OFFSET OF STORED MESSAGE IN X
10$:	INY				;NEXT RAD50 BYTE
	LDA	NY,TEMP3		;GET FIRST RAD50 BYTE
	STA	Z,TEMP4			;PUT IT IN TEMP4
	INY
	LDA	NY,TEMP3		;GET 2ND RAD50 BYTE
	STA	Z,TEMP4+1		;PUT IT IN TEMP4+1
	TYA				;SAVE X AND Y
	PHA
	TXA
	PHA
;THIS ROUTINE (COURTESY MIKE ALBAUGH)
;CONVERTS RAD50 IN TEMP4,4+1 TO
;ASCII IN TEMP4,4+1,4+2
;
	LDX	I,2
1$:	LDY	I,16.
	LDA	I,0
2$:	ASL	Z,TEMP4
	ROL	Z,TEMP4+1
	ROL
	CMP	I,40.
	BCC	3$
	SBC	I,40.
	INC 	Z,TEMP4
3$:	DEY
	BNE	2$
4$:	CLC
;
;NOTE: MIKE ALBAUGH'S ROUTINE HAS BEEN
;MODIFIED HERE TO GIVE DATA
;COMPATIBLE WITH SUBS PROMS. IT DOES
;NOT GIVE TRUE ASCII. IT GIVES
;DATA ACCORDING TO THE TABLE BELOW:
;
;CHARACTER	RAD50		DATA
;
; SPACE		 0		 0
; A-Z		 1-1A		 1-1A
; $		 1B		 1B
; PERIOD	 1C		 1C
; 0-9		 1E-27		 30-39
;
	CMP	I,1E			;IS IT A NUMBER?
	BCC	5$			;NO
	ADC	I,11			;YES, ADD 12 HEX (CARRY SET)
5$:	STA	ZX,TEMP4
	DEX
	BMI	6$
	BNE	1$
	LDA	Z,TEMP4
	BCC	4$			;BRA
6$:	PLA				;DONE CONVERTING. GET OLD X
	TAY				;PUNT IN Y. (OFFSET ON SCREEN)
	LDX	I,0			;COUNTER FOR 3 CONVERTED BYTES
20$:	LDA	ZX,TEMP4		;GET DATA
	CMP	I,1C			;IS IT A PERIOD?
	BEQ	30$			;YES, WE ARE DONE (CARRY SET)
	ORA	Z,TEMP1+1		;NO-TACK ON VISIBLITY
	STA	NY,TEMP2		;PUT IN OUT
	INY				;BUMP PFLD POINTER
	INX				;NEXT CHARACTER
	CPX	I,3			;DONE WITH ALL 3?
	BNE	20$			;NO
	CLC				;YES, BUT NO PERIOD SENSED
30$:	TYA				;RESTORE X AND Y
	TAX				;TO THEIR CORRECT PLACE
	PLA
	TAY
	BCC	10$			;MORE TO BE CONVERTED
	RTS				;WHOLE MESSAGE DONE
	.ENDR
	.PAGE
	.SBTTL	COIN MODE INDEX ROUTINE
;*GET COIN MODE ROUTINE
;
;	THIS ROUTINE GENERATES THE COIN MODE
;	INDEX AND PUTS IT IN X.
;	TEMP4 IS USED.
;	OPTSW1 HAS THE MSB'S
;	OPTSW2 BIT 1 HAS THE LSB
GTCNMD:
	LDA	Z,OPTSW1
	AND	I,3
	ASL
	STA	Z,TEMP4
	LDA	Z,OPTSW2
	AND	I,2
	LSR
	ORA	Z,TEMP4
	ASL			;TIMES 2 CAUSE MODE ARE 2 BYTES
	TAX
	RTS
;
;
	.SBTTL	LANGUAGE INDEX ROUTINE
	
;*GET LANGUAGE INDEX ROUTINE
; THIS ROUTINE GENERATES THE
; LANGUAGE INDEX AND PUTS IT IN X.
;
GTLNGX:
	LDA	Z,OPTSW3		;LANG. SWITCHES IN OPTSW3
	AND	I,3			;BITS 1 AND 0
	BEQ	10$			;ENGLISH IN MAIN ROM
	CMP	I,3
	BEQ	10$			;GERMAN IN MAIN ROM
	LDX	A,2000			;SEE IF OPTIONAL PROM IS THERE
	CPX	I,4C
	BEQ	10$			;YES--EVERYTHING IS COOL
	LDA	I,0			;NO--PUT IT IN ENGLISH
10$:	ASL				;ADDRESSES ARE 2 BYTES
	TAX				;PUT IT IN X
	RTS
	.SBTTL	CHECKSUM 7
	.BYTE CKSM7

	.SBTTL	TABLES
;*MESSAGE ADDRESS TABLES
PRCOIN:	.WORD PCENG,PCFRE	;PER COIN
	.WORD PCSPA,PCGER
PSH:	
	.WORD PSENG,PSFRE	;PUSH START
	.WORD PSSPA,PSGER
PREPARE:	.WORD	PRENG,PRFRE	;PREPARE FOR BATTLE
	.WORD	PRSPA,PRGER
INSRT:	.WORD ICENG,ICFRE	;INSERT COIN
	.WORD ICSPA,ICGER
YUHAV:	.WORD YHENG,YHFRE	;YOU HAVE X CREDITS
	.WORD YHSPA,YHGER
ONECN:	.WORD CNENG,CNFRE	;ONE COIN
	.WORD CNSPA,CNGER
PRPLYR:	.WORD PPENG,PPFRE	;PER PLAYER
	.WORD PPSPA,PPGER
;
;*MESSAGE TABLES
;
PCENG:	.ASCII /PER@COIN@@/			;ENGLISH - 10
.TEMP2	=.				;FRENCH AND SPANISH
	.=.TEMP1
PCFRE:	.ASCII /PAR@PIECE@/			;FRENCH
PCSPA:	.ASCII /POR@FICHA@/			;SPANISH
.TEMP1	=.
	.=.TEMP2
PCGER:	.ASCII /PRO@MUENZE/			;GERMAN


PSENG:	.ASCII	/@@@@@PUSH@START@@@@@@/	;21
.TEMP2	=.
	.=.TEMP1
PSFRE:	.ASCII	/@@APPUYER@SUR@START@@/
PSSPA:	.ASCII	/@@@@PULSAR@START@@@@@/
.TEMP1	=.
	.=.TEMP2
PSGER:	.ASCII	/STARTKNOEPFE@DRUECKEN/


PRENG:	.ASCII /PREPARE@FOR@BATTLE/	;18
PRFRE:				;SORRY FRENCHIES, NO ROOM!!
PRSPA:				;SORRY SPANIARDS, NO ROOM!!  (IS THAT WHAT YOU CALL THEM????)
PRGER:	.ASCII	/@BERETT@ZUM@KAMPF@/


ICENG:	.ASCII /@@@@INSERT@COINS@@@@@/	;21
.TEMP2	=.
	.=.TEMP1
ICFRE:	.ASCII /INTRODUIRE@LES@PIECES/
ICSPA:	.ASCII /@@@INSERTE@FICHAS@@@@/
.TEMP1	=.
	.=.TEMP2
ICGER:	.ASCII /@@@GELD@AUSWERFEN@@@@/


YHENG:	.ASCII /YOU@HAVE@@@CREDITS@/	;19
.TEMP2	=.
	.=.TEMP1
YHFRE:	.ASCII /VOUS@AVEZ@@@CREDITS/
YHSPA:	.ASCII /@TIENE@@@CREDITOS@@/
.TEMP1	=.
	.=.TEMP2
YHGER:	.ASCII /SIE@HABEN@@@KREDITE/

;*THIS TABLE GIVES THE OFFSET FROM THE BEGINNING OF THE MESSAGE TO WHERE
;THE NUMBER OF CREDITS GOES.  (THE LANGUAGE INDEX IS MULTIPLIED BY 2, SO
;THE TABLES ARE REPLICATED.)

CRDADR:	.WORD 0909,0A0A			;ENGLISH,FRENCH
	.WORD 0707,0A0A			;SPANISH,GERMAN


CNENG:	.ASCII /@1@COIN@/		;8
.TEMP2	=.
	.=.TEMP1
CNFRE:	.ASCII /1@PIECE@/
CNSPA:	.ASCII /1@MONEDA/
.TEMP1	=.
	.=.TEMP2
CNGER:	.ASCII /1@MUENZE/


PPENG:	.ASCII /PER@PLAYER@/		;11
.TEMP2	=.
	.=.TEMP1
PPFRE:	.ASCII /PAR@JOUEUR@/
PPSPA:	.ASCII /POR@JUGADOR/
.TEMP1	=.
	.=.TEMP2
PPGER:	.ASCII /PRO@SPIELER/
	.REPT 0				;THESE MESSAGES NOT USED
;*NEW MESSAGE ADDRESS TABLES
;
PRCN2:	.WORD PCENG2,PCFRE2		;PER COIN
	.WORD PCSPA2,PCGER2
PSH2:	.WORD PSENG2,PSFRE2		;PUSH START
	.WORD PSSPA2,PSGER2
PREPR2:	.WORD PRENG2,PRFRE2		;PREPARE FOR BATTLE
	.WORD PRSPA2,PRGER2
INSRT2:	.WORD ICENG2,ICFRE2		;INSERT COINS AND
	.WORD ICSPA2,ICGER2		;ONE COIN PER PLAYER
YUHAV2:	.WORD YHENG2,YHFRE2		;YOU HAVE X CREDIT
	.WORD YHSPA2,YHGER2
;
;*NEW MESSAGE TABLES
;
PCENG2:
	.BYTE 0				;OFFSET FROM BEGINING
	.RAD50	/PER COIN./
PCFRE2:
	.BYTE 0
	.RAD50	/PAR PIECE./
PCSPA2:
	.BYTE 0
	.RAD50	/POR FICHA./
PCGER2:
	.BYTE 0
	.RAD50	/PRO MUENZE./
	
	
PSENG2:
	.BYTE 5
	.RAD50	/PUSH START./
PSFRE2:
	.BYTE 2
	.RAD50	/APPUYER SUR START./
PSSPA2:
	.BYTE 4
	.RAD50	/PULSAR START./
PSGER2:
	.BYTE 0
	.RAD50	/STARTKNOEPFE DRUECKEN./
	
	
PRENG2:
	.BYTE 3
	.RAD50	/PREPARE./
	.BYTE 2
	.RAD50	/FOR BATTLE./
PRFRE2:
	.BYTE 0
	.RAD50	/PREPAREZ VOUS./
	.BYTE 0
	.RAD50	/POUR LE COMBAT./
PRSPA2:
	.BYTE 0
	.RAD50	/PREPARASE PARA./
	.BYTE 2
	.RAD50	/LA BATALLA./
PRGER2:
	.BYTE 4
	.RAD50	/BEREIT./
	.BYTE 3
	.RAD50	/ZUM KAMPF./
	
	
ICENG2:
	.BYTE 4
	.RAD50	/INSERT COINS./
	.BYTE 1
	.RAD50	/1 COIN PER PLAYER./
ICFRE2:
	.BYTE 0
	.RAD50	/INTRODUIRE LES PIECES./
	.BYTE 1
	.RAD50	/1 PIECE PAR JOUEUR./
ICSPA2:
	.BYTE 3
	.RAD50	/INSERTE FICHAS./
	.BYTE 0
	.RAD50	/1 MONEDA POR JUGADOR./
ICGER2:
	.BYTE 3
	.RAD50	/GELD AUSWERFEN./
	.BYTE 0
	.RAD50	/1 MUENZE PRO SPIELER./
	
	
YHENG2:
	.BYTE 0
	.RAD50	/YOU HAVE./
	.BYTE 0
	.RAD50	/CREDIT./
YHFRE2:
	.BYTE 0
	.RAD50	/VOUS AVEZ./
	.BYTE 0
	.RAD50	/CREDITS./
YHSPA2:
	.BYTE 2
	.RAD50	/TIENE./
	.BYTE 0
	.RAD50	/CREDITOS./
YHGER2:
	.BYTE 0
	.RAD50	/SIE HABEN./
	.BYTE 0
	.RAD50	/KREDITE./
	.ENDR
;
;*VERTICAL AND HORIZONTAL SINE-COSINE TABLES
;
VOFST:
	.BYTE -10.,-10.,-9,-7,-5,-3
HOFST:	.BYTE 0,3,5,7,9,10.
	.BYTE 10.,10.,9,7,5,3
	.BYTE 0,-3,-5,-7,-9,-10.
	.BYTE -10.,-10.,-9,-7,-5,-3
;
;*VERTICAL AND HORIZONTAL DISPLACEMENT TABLES
;
;THESE TABLES GIVE THE OFFSET FROM THE
;CENTER OF THE SUB TO THE FRONT TIP
;OF THE SUB
;
VDSPLC:
	.BYTE	-7,-7,-6,-5,-5,-4
	.BYTE	-1,3,5,6,7,8
	.BYTE	8,8,7,6,5,4
	.BYTE	1,-3,-5,-5,-6,-7
HDSPLC:
	.BYTE	0,2,4,5,6,7
	.BYTE	7,7,6,5,4,2
	.BYTE	-1,-3,-5,-6,-7,-8
	.BYTE	-8,-8,-7,-6,-5,-3
;
; PLAYFIELD DATA TABLE
;
PFTABL:	.BYTE	0DC,0DD,0DE,0DB,0DF,0E0,0E1	;ISLAND 1
	.BYTE	0DE,0DB,0E2,0E3,0E1
	.BYTE	0DC,0DC,0E4,0E5,0DE,0DB,0E1	;ISLAND 2
	.BYTE	0E3,0DB,0DD,0DE,0DB,0E2
	.BYTE	0D4,0C9,0CD,0C5			;TIME
	.BYTE	2A,28,28,28,28,28,28,28,28,2B,2B	;BOUNDARY
	.BYTE	29,29,29,29,29,29,29,29,29,29,2A
	.BYTE	1B,1B,1B,1B,1B,1B,1B,1B
;
; PLAYFIELD ADDRESS TABLE
;
PFADR:	.WORD 0A14,0A15,0A33,0A34,0A35			;ISLAND 1
	.WORD 0A53,0A54,0A72,0A73,0A74,0A92,0A93
	.WORD 8CC,8EA,8EB,8EC,909,90A,90B		;ISLAND 2
	.WORD 929,92A,92B,949,94A,94B
	.WORD 0B45,0B46,0B47,0B48			;TIME
	.WORD	856,899,8DA,8FB,93C,0A5C,0A9B,0ABA	;BOUNDARY
	.WORD	0AF9,0B17,0B36,0B4A,0B2A,0AE6,0AA5,0A84
	.WORD	0A43,923,8E4,8C5,886,849
	.WORD	982,9A2,9C2,9E2,99D,9BD,9DD,9FD
	.REPT 2800-.
	.BYTE 0
	.ENDR
;*PLAYFIELD BOUNDARY TABLE
;GIVES LOCATION OF SOLID STAMPS (1B)
;RELATIVE TO PAGE BOUNDARIES
PF1:	.BYTE	28,29,2A,2B,2C,2D,2E,2F,30,31		;800-87F
	.BYTE	32,33,34,35,36,37,38,46,47,48
	.BYTE	57,58,59,65,66,67,78,79,7A,7A
PF2:	.BYTE	04,05,1A,1B,24,25,3A,3B,43,44		;880-97F
	.BYTE	5B,5C,62,63,7C,7D,82,83,9C,9D
	.BYTE	0A2,0BD,0C2,0DD,0E2,0FD,4,4,4,4
PF3:	.BYTE	02,1D,22,3D,42,5D,62,63,7C,7D		;A00-AFF
	.BYTE	82,83,9C,9D,0A3,0A4,0BB,0BC,0C4,0C5
	.BYTE	0DA,0DB,0E4,0E5,0FA,0FB,2,2,2,2
PF4:	.BYTE	05,06,07,18,19,1A,26,27,28,29		;B00-B7F
	.BYTE	37,38,39,49,55,56,57,69,6A,6B
	.BYTE	6C,6D,6E,6F,70,71,72,73,74,75
;*"YOUR SCORE", "ENEMY SCORE" TANBLES
YRSCR:	.WORD	YSENG,YSFRE
	.WORD	YSSPA,YSGER
YSENG:	.ASCII	/YOUR@SCORE@@@@@@@@@@@ENEMY@SCORE/
.TEMP2	=.
	.=.TEMP1
YSFRE:	.ASCII	/VOS@POINTS@@@@@@@@@@@@@XENNEMI@@/	;X=L'
YSSPA:	.ASCII	/SUS@PUNTOS@@@@@@@@@@@DEL@ENEMIGO/
	.REPT	2100-.
	.BYTE	0
	.ENDR
	.=.TEMP2
YSGER:	.ASCII	/EIGNE@TREFQ@@@@@@@@@@FEIND@TREFQ/	;Q=F.
;
;*STAMP BOUNDARY TABLES
;
;THESE TABLES GIVE THE 4 BOUNDARIES
;FOR EACH ISLAND STAMP AND EACH
;BOUNDARY STAMP. DISTANCES ARE MEASURED
;IN DOTS FROM THE UPPER-LEFT HAND CORNER
;OF THE STAMP.
;THE DISTANCES ARE PACKED 2 TO A BYTE
;VBOUND:	MSN = LEFT BOUNDARY
;		LSN = RIGHT BOUNDARY
;HBOUND:	MSN = TOP BOUNDARY
;		LSN = BOTTOM BOUNDARY
VBOUND:				;VERTICAL BOUNDARIES-LR
	.BYTE 08		;STAMP 1B-SOLID
	.BYTE 08,08,38,03	;1C-1F	-ISLAND
	.BYTE 08,08,08,48	;20-23	-ISLAND
	.BYTE 08,07,08,04	;24-27	-ISLAND
	.BYTE 48,04,08,08	;28-2B	-BOUNDARY
	.BYTE 80		;2C	-COLON
	.BYTE 07,48,08		;2D-2F	-ISLAND
	.BYTE 80,80,80,80,80	;30-34	-NUMBERS
	.BYTE 80,80,80,80,80	;35-39	-NUMBERS
	.BYTE 07,38,08		;3A-3C	-ISLAND
	.BYTE 01,80,80		;3D-3F	-ISLAND
HBOUND:				;HORIZ BOUNDARIES - TB
	.BYTE 08		;1B	-SOLID
	.BYTE 18,08,08,06	;1C-1F	-ISLAND
	.BYTE 28,08,08,08	;20-23	-ISLAND
	.BYTE 08,08,04,03	;24-27	-ISLAND
	.BYTE 08,08,04,48	;28-2B	-BOUNDARY
	.BYTE 80		;2C	-COLON
	.BYTE 08,06,07		;2D-2F	-ISLAND
	.BYTE 80,80,80,80,80	;30-34	-NUMBERS
	.BYTE 80,80,80,80,80	;35-39	-NUMBERS
	.BYTE 03,05,68		;3A-3C	-ISLAND
	.BYTE 13,80,80		;3D-3F	-ISLAND
;
;*MAXIMUM TIME BETWEEN DRONE FIRING
;
;	THIS TABLE GIVES A NUMBER INDICATING THE LENGTH OF TIME BEFORE A
;	DRONE MUST FIRE.  THE FIRST ENTRY IS FOR A "DUMB" DRONE, THE LAST
;	ENTRY IS FOR A "SMART" DRONE. (0 TO 3F)
;
MAXFIRE:
	.BYTE	8,10,20,30,3F,3F
	.REPT 3C00-.
	.BYTE 0
	.ENDR
	.=3C00
;
;*MINIMUM TIME BETWEEN DRONE FIRING
;
;	THIS TABLE GIVES A NUMBER INDICATING THE LENGTH OF TIME THE DRONE
;	MUST WAIT BEFORE SHOOTING A SECOND TORP.
;
MINFIRE:
	.BYTE	20,10,8,4,2,2
;
;*DRONE MASK
;
;	THIS TABLE GIVES A MASK USED WITH THE
;	FRAME NUMBER TO DETERMINE HOW OFTEN
;	THE DRONE SHOULD BE UPDATED.
;
;
DRNMSK:
	.BYTE 0F,7,3,1,0,0
COINMODE:
	.WORD	0030		;0 MIN. 30 SEC PER COIN
	.WORD	0100		;1 MIN. 00 SEC
	.WORD	0130		;1 MIN. 30 SEC
	.WORD	0200		;2 MIN. 00 SEC
	.WORD	0230		;2 MIN. 30 SEC
	.WORD	0300		;3 MIN. 00 SEC
	.WORD	0330		;3 MIN. 30 SEC
	.WORD	0400		;4 MIN. 00 SEC
	.PAGE
	.SBTTL	POWER-ON ROUTINE
;
;*POWER-ON RESET ROUTINE
;
;DESCRIPTION:
;	THIS ROUTINE IS USED TO INITIALIZE THE GAME WHEN POWER IS
;	TURNED ON AND WHENEVER AN INVALID STATE IS FOUND.
;
PWRON:	SEI
	CLD
	LDX	I,0FF		;SET SP=0FF
	TXS
	LDA	I,0
	STA	Z,NOIZRST
	STA	Z,INVTOFF
	STA	Z,INVTOFF+2
	BIT	Z,SLFTST	;SELF-TEST ON?
	BPL	SUBTST		;YES
10$:	STA	ZX,0		;CLEAR WORKING RAM
	DEX
	BMI	10$
	LDA	I,55
	STA	Z,TEST1		;INITIALIZE THE TWO
	LDA	I,0AA		;BYTES THAT VERIFY
	STA	Z,TEST2		;THAT THE GAME HAS BEEN INITIALIZED
	JSR	A,CLRSCRN
20$:	JMP	A,START2
	.SBTTL	CLEAR SCREEN ROUTINE
;
;*CLEAR SCREEN ROUTINE
;
;THIS ROUTINE STORES ZERO FROM 0800 TO 0B7F (USES X AND A)
;
CLRSCRN:
	LDA	I,0		;CLEAR PLAYFIELD
	LDX	I,00
20$:	STA	AX,PF
	STA	AX,PF+100
	STA	AX,PF+200
	CPX	I,80		;DON'T CLEAR BASE PAGE AGAIN!
	BCS	30$
	STA	AX,PF+300
30$:	DEX
	BNE	20$
	RTS
	.PAGE
	.SBTTL	SELF-TEST
;
;*SELF-TEST ROUTINE
;
;THIS ROUTINE CHECKS RAM, ROM, AND I/O
SUBTST:
	LDY	I,1		;OUTER LOOP COUNTER
5$:	LDX	I,0		;INNER LOOP INDEX
10$:	TYA			;DATA PATTERN
	STA	AX,PF
	INY
	TYA
	STA	AX,PF+100
	INY
	TYA
	STA	AX,PF+200
	INY
	TYA
	STA	AX,PF+300
	DEY
	DEY			;NET EFFECT, Y=Y+1
	INX
	BNE	10$
20$:	TYA
	EOR	AX,PF
	STA	AX,PF		;SHOULD STORE BACK A ZERO
	BNE	RAMERR
	INY
	TYA
	EOR	AX,PF+100
	STA	AX,PF+100
	BNE	RAMERR
	INY
	TYA
	EOR	AX,PF+200
	STA	AX,PF+200
	BNE	RAMERR
	INY
	TYA
	EOR	AX,PF+300
	STA	AX,PF+300
	BNE	RAMERR
	DEY
	DEY			;Y=Y+1
	INX
	BNE	20$
	TYA
	ASL
	TAY
	BCC	5$
	BCS	ROMTST
;
;OUTPUT NOISE FOR BAD BITS IN RAM.  OUTPUT PING FOR GOOD BIT, CRASH FOR BAD
;BIT.  START WITH D7 AND STOP WHEN THERE ARE NO MORE BAD BITS.
;
RAMERR:
	STA	Z,XPLDOFF
	STA	Z,CRSHOFF
	STA	Z,SNROFF
	STA	Z,SNROFF+2
	STA	Z,LMPOFF
	STA	Z,LMPOFF+2
	LDX	I,0F0
	STX	Z,SOUNDS	;LOAD CRASH LATCH
1$:	LDX	I,0
	LDY	I,0
	CMP	I,0
40$:	BEQ	40$		;DONE, WAIT FOR NMI
	ASL
	BCC	30$		;BRANCH IF BIT IS GOOD
10$:	STX	Z,CRSHON	;BIT IS BAD - CRASH ON
	STX	Z,LMPON
	DEY
	BNE	10$		;DELAY
	DEX
	BNE	10$
	BEQ	34$
30$:	STX	Z,SNRON		;BIT IS GOOD - PING ON
	STX	Z,SNRON+2
	STX	Z,LMPON+2
	DEY
	BNE	30$		;DELAY
	DEX
	BNE	30$
34$:	STX	Z,CRSHOFF	;DONE WITH THIS BIT
	STX	Z,SNROFF	;SHUT BOTH OFF
	STX	Z,SNROFF+2
	STX	Z,LMPOFF
	STX	Z,LMPOFF+2
	DEY
	BNE	34$		;DELAY
	DEX
	BNE	34$
	BEQ	1$		;DO NEXT BIT
;
;OUTPUT "RAM OK ROM OK"
;
ROMTST:
	STA	Z,XPLDOFF
	STA	Z,SNROFF
	STA	Z,SNROFF+2
	LDX	I,12.		;13 LETTERS
10$:	LDA	AX,RAMOK
	ORA	I,0C0
	STA	AX,0889
	DEX
	BPL	10$
;PROM TEST
;THIS TEST CHECK EACH 1K X 4 PROM.
;PROM A BAD = 2000 LSB
;PROM B BAD = 2000 MSB
;PROM C BAD = 2400 LSB
;PROM D BAD = 2400 MSB
;PROM E BAD = 2800 LSB
;PROM F BAD = 2800 MSB
;PROM G BAD = 2C00 LSB
;PROM H BAD = 2C00 MSB
;PROM I BAD = 3000 LSB
;PROM J BAD = 3000 MSB
;PROM K BAD = 3400 LSB
;PROM L BAD = 3400 MSB
;PROM M BAD = 3800 LSB
;PROM N BAD = 3800 MSB
;PROM O BAD = 3C00 LSB
;PROM P BAD = 3C00 MSB
PRMTST:
	LDA 	I,3F
	STA	Z,TEMP1+1		;PAGE COUNTER
10$:	LDY	I,3
20$:	LDX	I,0
	TXA
	STA	Z,TEMP1
40$:	EOR	NX,TEMP1
	DEC 	Z,TEMP1
	BNE	40$
	DEC	Z,TEMP1+1
	DEY
	BPL	40$
	PHA				;SAVE RESULT
	LDA	Z,TEMP1+1		;GET CURRENT PAGE
	SEC				;GET WITHIN RANGE
	SBC I,1F
	LSR				;GET CURRENT 1K
	LSR
	TAX				;PUT IN X
	PLA				;RESTORE RESULT
	EOR	AX,CKSMS		;COMPARE TO CHECKSUM FOR THIS PROM
	STA	Z,TEMP2
	BNE	55$			;ERROR
50$:	LDA	Z,TEMP1+1
;THIS PROGRAM HAS BEEN WRITTEN TO CHECK
;2000-20FF AND 2800-3FFF
;IT CAN BE MODIFIED EASILY TO CHECK
;OTHER ADDRESSES. CHANGE THE CMP
;BELOW TO BE EQUAL TO THE LOWES
;PAGE TO BE CHECKED. LEAVE OUT
;THE INSTRUCTIONS WITH ASTERICKS.
	
	CMP	I,28			;DO IT FOR 2800-3FFF
	BCS	10$
;	BCC	SWTTST			;IF CONTIGUOUS CODE
	CMP	I,1F			;*DONE?
	BEQ	SWTTST			;*YES
	LDA	I,20			;*NO--DO IT FOR 2000-20FF
	STA	Z,TEMP1+1		;*PAGE 20
	LDY	I,0			;*ONLY 1 PAGE - NOT 4
	BEQ	20$			;*BRA
;BAD ROM
55$:	LDX	I,0			;CLEAR "OK"
	STX	A,0894
	STX	A,0895
	AND	I,0F			;FIRST OR LAST NYBBLE BAD?
	BEQ	60$			;FIRST
	LDA	Z,TEMP1+1		;LAST
	SEC
	SBC	I,1D			;SUBTRACT 1F TO GET IN RANGE
					;ADD TWO TO GET A-P
	LSR				;DON'T NEED 32, ONLY 16
	ORA	I,1			;LAST BIT=1 FOR MSB'S
	PHA				;SAVE BAD ROM #
	LSR				;GET A POSITION TO STORE IT
	TAX
	PLA				;RESTORE BAD ROM #
	ORA	I,0C0			;MAKE VISIBLE
	STA	AX,0895			;STORE IT OUT
	LDA	Z,TEMP2
	AND 	I,0F0
	BEQ	50$
60$:	LDA	Z,TEMP1+1		;FIRST NYBBLE BAD
	SEC				;SAME AS ABOVE
	SBC	I,1B
	LSR
	AND	I,0FE			;LAST BIT =0 FOR LSB'S
	PHA
	LSR
	TAX
	DEX
	PLA
	ORA	I,0C0
	STA	AX,08B5			;STORE BELOW MSB'S
	BMI	50$
;NOW DO SWITCH TEST
SWTTST:
	LDA	I,BLANK
	STA	Z,ROTATE
	STA	Z,ROTATE+2
	STA	Z,ROTATE+4
	STA	Z,ROTATE+6
	STA	Z,CRSHON
	LDX	I,19.
10$:	LDA	AX,SWMES1	;PUT OUT "FIRE", "START",
	STA	AX,0986		;ON BOTH SCREENS
	DEX
	BPL	10$
	LDX	I,9
20$:	LDA	AX,SWMES2	;PUT OUT "RIGHT" AND
	STA	AX,0A6B
	DEX
	BPL	20$
SWT1:	LDX	I,2		;CHECK ONE PLAYER AT A TIME
	LDY	I,9B		;"BLOCK" FOR SCREEN #2
	LDA	I,0
	STA	Z,SOUNDS
10$:	STA	ZX,LMPOFF
	LDA	ZX,FIRE		;HANDLE FIRE BUTTON (LO TRUE)
	JSR	A,SWTST1	;HANDLE SOUND AND LAMP
	STA	AX,09A6		;STORE "BLOCK" UNDER "FIRE"
	LDA	ZX,STRTSW	;SAME FOR "START" (LO TRUE)
	JSR	A,SWTST1
	STA	AX,09AC
	BIT	Z,SLAM		;SAME FOR "SLAM" (LO TRUE)
	JSR	A,SWTST1
	STA	AX,09B1
	LDA	ZX,COIN		;SAME FOR "COIN" SWITCH
	EOR	I,80		;(HI TRUE)
	JSR	A,SWTST1
	STA	AX,09B6
	TXA			;NOW CHECK STEERING
	STA	AX,0A8B		;CLEAR "BLOCKS"
	STA	AX,0A91
	LDA	ZX,STRFLG	;STEERING SENSED?
	BPL	60$		;NO
	JSR	A,SWTST2
	LDA	ZX,STRDIR	;WHICH DIRECTION?
	BPL	55$		;LEFT
	TYA			;RIGHT
	STA	AX,0A91
	BNE	60$		;BRA
55$:	TYA
	STA	AX,0A8B
60$:	DEX			;NEXT PLAYER
	DEX
	BMI	90$
	LDY	I,5B		;BLOCK FOR PLAYER 0
	BPL	10$		;DO PLAYER 0
90$:	STA	Z,STRRST
;DISPLAY OPTION SWITCHES
	LDX	I,3
	LDY	I,0
80$:	LDA	ZX,OPTSW1
	EOR	I,3			;MAKE READABLE FOR JOE AVERAGE
	PHA
	AND	I,1			;GET BIT 0
	ORA	I,0F0			;MAKE IT A 0 OR 1 AND VISIBLE
	STA 	AY,090B			;PUT IT OUT
	PLA
	AND	I,2			;NOW DO BIT 1 SAME WAY
	LSR
	ORA	I,0F0
	INY
	STA	AY,090B
	INY
	INY
	DEX
	BPL	80$
91$:	BIT	Z,VBLANK
	BPL	91$
92$:	BIT	Z,VBLANK
	BMI	92$
	LDA	Z,DIAGSTP
	BPL	DIAG
	JMP	A,SWT1
;
;THIS SUBROUTINE TURNS ON THE APPROPRIATE START LAMP AND CRASH SOUND IF A
;SWITCH WAS SENSED.  THE ACC IS LOADED WITH AN INVISIBLE NUMBER (X) IF NO
;SWITCH CLOSURE.  IT IS LOADED WITH Y (A VISIBLE "BLOCK") IF THE SWITCH IS
;CLOSED.  IT IS ENTERED WITH THE N FLAG CONTAINING THE SWITCH (MINUS=0FF,
;PLUS=ON)
SWTST1:
	BMI	SWTST3		;SWITCH OFF
SWTST2:				;SWITCH ON
	STA	ZX,LMPON	;TURN START LAMP ON
	LDA	I,0F0
	STA	Z,SOUNDS	;TURN CRASH SOUND ON
	TYA			;GET VISIBLE "BLOCK" IN ACC
	RTS
SWTST3:
	TXA			;INVISIBLE STAMP IN ACC
	RTS
	.PAGE
	.SBTTL	DIAGNOSTIC ROUTINES
;
;*DIAGNOSTIC TEST ROUTINE
;
;	THIS ROUTINE IS A COMPREHENSIVE CHECK OF MOST OF THE
;	CIRCUITS ON THE PCB. EVERYTHING IS SYNCHED TO VBLANK
;	SO A TEST TECH CAN TRIGGER ON VSYNCH. IT IS ENTERED
;	BY ENTERING SELF TEST, THEN PUSHING THE DIAGNOSTIC
;	STEP SWITCH. THE TEST NUMBER WILL BE INCREMENTED EACH
;	TIME THE STEP BUTTON IS PRESSED. THE DIAGNOSTIC HOLD
;	BUTTON FREEZES THE SCREEN AND CONTINUALLY WRITES TO
;	TO THE HARDWARE CURRENTLY BEING TESTED. ONLY ROM 3
;	NEEDS TO BE IN THE BOARD FOR THE SELF TEST AND DIAGNOSTIC
;	ROUTINES TO FUNCTION.
;
DIAG:	JSR	A,CLRSCRN		;INITIALIZE EVERYTHING
	STA 	Z,CRSHOFF
	STA	Z,XPLDOFF
	STA	Z,LMPOFF
	STA	Z,LMPOFF+2
	LDA	I,0
	STA	Z,SOUNDS
	STA	Z,SBENABL		;DISABLE SUBS ON OTHER SCREEN
	STA	Z,SBENABL+2
	LDX	I,1
10$:	STA	ZX,TEMP1		;TEMP (2 BYTES)
	STA	ZX,TEMP2		;PIPELINE FOR DEBOUNCING SWITCH
					;COUNTER USED IN TESTS
	STA	ZX,TEMP3		;TEST NUMBER COUNTER
					;COUNTER USED IN TESTS
	DEX
	BPL	10$
	LDX	I,6
20$:	LDA 	I,BLANK
	STA	ZX,ROTATE
	LDA	I,0
	STA	ZX,HPOS
	STA	ZX,VPOS
	DEX
	DEX
	BPL	20$
;
;THIS FORMAT IS COURTESY OF CHRIS DOWNEND
;(TAKEN FROM TIMEBOMB DIAGNOSTIC ROUTINE)
AGAIN:	LDY	Z,TEMP3			;JUMP TO CORRECT TEST
	LDA	AY,TESTAB		;TABLE OF TEST ADDRESSES
	STA	Z,TEMP1
	LDA	AY,TESTAB+1
	STA	Z,TEMP1+1
	JMP	N,TEMP1
RETX:	BIT	Z,VBLANK		;WAIT FOR VBLANK
	BPL	RETX
10$:	BIT	Z,VBLANK
	BMI	10$
	LDA	Z,DIAGSTP		;SAMPLE STEP SWITCH
	ROL
	ROR	Z,TEMP2
	LDA	Z,TEMP2
	CMP	I,7F			;OFF FOR 7 SAMPLES, ON FOR 1
	BNE	AGAIN			;NOT PUSHED, KEEP SAME TEST #
;TIME TO CHANGE TEST NUMBER
	JSR	A,CLRSCRN
	INC	Z,TEMP3
	INC	Z,TEMP3
	LDA	Z,TEMP3
	CMP	I,17.			;9 TESTS
	BCC	AGAIN
	BCS	DIAG			;9 TESTS DONE, START OVER
TESTAB:					;TABLE OF TEST ADDRESSES
	.WORD 	TST1
	.WORD	TST2
	.WORD	TST3
	.WORD	TST4
	.WORD	TST5
	.WORD	TST6
	.WORD	TST7
	.WORD	TST8
	.WORD	TST9
TST1:					;CLEAR SCREEN
	JSR	A,CLRSCRN
	JMP	A,RETX
TST2:					;OUTPUT ALPHA-NUMERICS
	LDX	I,0
10$:	TXA
	STA	AX,PF
	INX
	BNE	10$
	JMP	A,RETX
TST3:					;MOVE OBJECTS HORIZONTALLY
	LDA	I,0F3			;PUT OUT TEST NUMBER
	STA	A,PF
	LDA	I,0
	STA	Z,ROTATE
	STA	Z,ROTATE+2
	STA	Z,ROTATE+4
	STA	Z,ROTATE+6
	LDA	I,20
	STA	Z,VPOS
	LDA	I,40
	STA	Z,VPOS+2
	LDA	I,60
	STA	Z,VPOS+4
	LDA	I,80
	STA	Z,VPOS+6
	LDA	Z,DIAGHLD		;DON'T INCREMENT IF "HOLD"
	BPL	10$
	INC	Z,TEMP2+1
	BNE	10$			;TOGGLE ENABLES EVERY "WRAP"
	LDA	Z,SBENABL
	EOR	I,80
	STA	Z,SBENABL
	STA	Z,SBENABL+2
10$:	LDA	Z,TEMP2+1
	STA	Z,HPOS
	STA	Z,HPOS+2
	STA	Z,HPOS+4
	STA	Z,HPOS+6
	JMP	A,RETX
TST4:					;MOVE OBJECTS VERTICALLY
	LDA	I,0F4			;PUT UP TEST NUMBER
	STA	A,PF
	LDA	I,20			;STAGGER HORIZONTALLY
	STA	Z,HPOS
	LDA	I,40
	STA	Z,HPOS+2
	LDA	I,60
	STA	Z,HPOS+4
	LDA	I,80
	STA	Z,HPOS+6
	LDA	Z,DIAGHLD		;DON'T INCREMENT IF "HOLD"
	BPL	10$
	INC	Z,TEMP2+1
	BNE	10$
	LDA	Z,SBENABL		;TOGGLE ENABLE EVERY "WRAP"
	EOR	I,80
	STA	Z,SBENABL
	STA	Z,SBENABL+2
10$:	LDA	Z,TEMP2+1
	STA	Z,VPOS
	STA	Z,VPOS+2
	STA	Z,VPOS+4
	STA	Z,VPOS+6
	JMP	A,RETX
TST5:					;ROTATIONS
	LDA	I,0F5			;PUT UP TEST NUMBER
	STA	A,PF
	LDA	I,20			;STAGGER DIAGONALLY
	STA	Z,HPOS
	STA	Z,VPOS
	LDA	I,50
	STA	Z,HPOS+2
	STA	Z,VPOS+2
	LDA	I,80
	STA	Z,HPOS+4
	STA	Z,VPOS+4
	STA	Z,SBENABL		;ENABLE ON BOTH SCREENS
	STA	Z,SBENABL+2
	LDA	I,0B0
	STA	Z,HPOS+6
	STA	Z,VPOS+6
	LDA	Z,DIAGHLD		;DON'T INCREMENT IF "HOLD"
	BPL	10$
	INC	Z,TEMP2+1		;DON'T UPDATE EVERY FRAME
	BMI	10$			;(INNER COUNTER)
	LDA	I,0E0			;TIME TO UPDATE
	STA	Z,TEMP2+1
	LDA	Z,TEMP3+1
	EOR	I,1			;TOGGLE SUB - TORP BIT
	CLC
	ADC	I,04			;NEXT ROTATION EVERY OTHER TIME
	STA	Z,TEMP3+1
10$:	LDA	Z,TEMP3+1
	STA	Z,ROTATE
	STA	Z,ROTATE+2
	STA	Z,ROTATE+4
	STA	Z,ROTATE+6
	JMP	A,RETX
TST6:					;TEST "PING"
	LDA	I,0F6
	STA	A,PF
	LDA	I,BLANK			;BLANK MOTION OBJECTS
	STA	Z,ROTATE
	STA	Z,ROTATE+2
	STA	Z,ROTATE+4
	STA	Z,ROTATE+6
	LDA	Z,DIAGHLD		;DON'T UPDATE IF "HOLD"
	BPL	10$
	INC	Z,TEMP2+1
10$:	BIT	Z,TEMP2+1
	BPL	20$
	STA	Z,SNRON			;0 ON, 2 OFF
	STA	Z,SNROFF+2
	JMP 	A,RETX
20$:	STA	Z,SNRON+2		;2 ON, 0 OFF
	STA	Z,SNROFF
	JMP	A,RETX
TST7:					;TEST "LAUNCH" SOUND
	LDA	I,0F7
	STA	A,PF
	STA	Z,SNROFF		;TURN OFF "PING"
	STA	Z,SNROFF+2
	LDA	Z,DIAGHLD		;DON'T UPDATE IF "HOLD"
	BPL	10$
	INC	Z,TEMP2+1
10$:	LDA	Z,TEMP2+1
	LSR
	LSR
	LSR
	LSR
	STA	Z,SOUNDS		;BIT 0-3 = LAUNCH
	JMP	A,RETX
TST8:					;TEST "CRASH" SOUND
	LDA	I,0F8
	STA	A,PF
	STA	Z,CRSHON		;ENABLE CRASH
	LDA	Z,DIAGHLD		;DON'T UPDATE IF "HOLD"
	BPL	10$
	INC	Z,TEMP2+1
10$:	LDA	Z,TEMP2+1
	AND	I,0F0
	STA	Z,SOUNDS		;D4-D7 = CRASH/EXPLODE
	JMP	A,RETX
TST9:					;TEST "EXPLODE" SOUND
	LDA	I,0F9
	STA	A,PF
	STA	Z,CRSHOFF		;DISABLE CRASH
	STA	Z,XPLDON		;ENABLE EXPLODE
	LDA	Z,DIAGHLD		;DON'T UPDATE IF "HOLD"
	BPL	10$
	INC	Z,TEMP2+1
10$:	LDA	Z,TEMP2+1
	AND	I,0F0
	STA	Z,SOUNDS		;D4-D7 = CRASH/EXPLODE
	JMP 	A,RETX
;THIS TABLE GIVESS THE CHECKSUM FOR
;EACH 1K OF ROM/PROM
CKSMS:
	.BYTE 12,0F,34,56,78,9A,0BC,0DE
RAMOK:	.BYTE	0D2,0C1,0CD,0,0CF,0CB	;RAM OK
	.BYTE	0,0D2,0CF,0CD,0,0CF,0CB	;ROM OK
SWMES1:	.BYTE	0C6,0C9,0D2,0C5,0,0D3,0D4,0C1,0D2,0D4,0	;FIRE START
	.BYTE	0D3,0CC,0C1,0CD,0,0C3,0CF,0C9,0CE	;SLAM COIN
SWMES2:	.BYTE	0CC,0C5,0C6,0D4,0,0D2,0C9,0C7,0C8,0D4	;LEFT RIGHT
	.REPT	3FF9-.
	.BYTE	0
	.ENDR
	.PAGE
	.SBTTL	VECTORS, CHECKSUM 8
;
	.=3FF9
	.BYTE	CKSM8		;*RESERVED FOR CHECKSUM 8*
	.WORD	NMI		;NMI RESET VECTOR
	.WORD	PWRON		;RESET VECTOR
	.WORD	PWRON		;IRQ VECTOR
	.IF	EQ,OPTION	;DEVELOPMENT SYSTEM
	.=0F7C3
	.WORD	NMI
	.ENDC
	.END


                                                                                                                                                                                                                                                                                                           